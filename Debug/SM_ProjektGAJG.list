
SM_ProjektGAJG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e90  08007e90  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001dc  08008074  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  08008074  00020970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177cb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031bd  00000000  00000000  000379d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003ab98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002757f  00000000  00000000  0003d240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011db4  00000000  00000000  000647bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000edb1a  00000000  00000000  00076573  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016408d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  00164108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cb4 	.word	0x08007cb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007cb4 	.word	0x08007cb4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94b 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f806 	bl	8000e08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f005 fe6c 	bl	8006ad8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f965 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f92d 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000204 	.word	0x20000204

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000204 	.word	0x20000204

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_Delay+0x40>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000004 	.word	0x20000004

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d004      	beq.n	800112c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00c      	b.n	8001146 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2205      	movs	r2, #5
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e175      	b.n	8001460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8164 	bne.w	800145a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x4e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d00b      	beq.n	800123e <HAL_GPIO_Init+0xea>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001232:	2b11      	cmp	r3, #17
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80be 	beq.w	800145a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a64      	ldr	r2, [pc, #400]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012f6:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_GPIO_Init+0x324>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_GPIO_Init+0x328>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d037      	beq.n	8001392 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_GPIO_Init+0x32c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d031      	beq.n	800138e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a55      	ldr	r2, [pc, #340]	; (8001484 <HAL_GPIO_Init+0x330>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d02b      	beq.n	800138a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_GPIO_Init+0x334>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x22a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x21a>
 800136a:	2309      	movs	r3, #9
 800136c:	e012      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800136e:	230a      	movs	r3, #10
 8001370:	e010      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001372:	2308      	movs	r3, #8
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001376:	2307      	movs	r3, #7
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013a4:	4934      	ldr	r1, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x324>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_GPIO_Init+0x350>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae86 	bls.w	8001174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40022000 	.word	0x40022000
 80014a0:	40022400 	.word	0x40022400
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f806 	bl	800150c <HAL_GPIO_EXTI_Callback>
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f005 f826 	bl	800659c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	e006      	b.n	80015ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d104      	bne.n	80015be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_I2C_Init+0x11c>)
 80015ca:	430b      	orrs	r3, r1
 80015cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	ea42 0103 	orr.w	r1, r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	021a      	lsls	r2, r3, #8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69d9      	ldr	r1, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	02008000 	.word	0x02008000

08001644 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b20      	cmp	r3, #32
 8001662:	f040 80da 	bne.w	800181a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_I2C_Master_Transmit+0x30>
 8001670:	2302      	movs	r3, #2
 8001672:	e0d3      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800167c:	f7ff fc08 	bl	8000e90 <HAL_GetTick>
 8001680:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2319      	movs	r3, #25
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fe76 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0be      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2210      	movs	r2, #16
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d90e      	bls.n	80016ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8979      	ldrh	r1, [r7, #10]
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_I2C_Master_Transmit+0x1e0>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 ffd8 	bl	800269c <I2C_TransferConfig>
 80016ec:	e06c      	b.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_I2C_Master_Transmit+0x1e0>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 ffc7 	bl	800269c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800170e:	e05b      	b.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6a39      	ldr	r1, [r7, #32]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fe73 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e07b      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d034      	beq.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	2b00      	cmp	r3, #0
 8001764:	d130      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2200      	movs	r2, #0
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fe05 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e04d      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d90e      	bls.n	80017a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	b2da      	uxtb	r2, r3
 8001796:	8979      	ldrh	r1, [r7, #10]
 8001798:	2300      	movs	r3, #0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 ff7b 	bl	800269c <I2C_TransferConfig>
 80017a6:	e00f      	b.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	8979      	ldrh	r1, [r7, #10]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 ff6a 	bl	800269c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d19e      	bne.n	8001710 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fe52 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e01a      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2220      	movs	r2, #32
 80017ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_I2C_Master_Transmit+0x1e4>)
 80017fa:	400b      	ands	r3, r1
 80017fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	80002000 	.word	0x80002000
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	4613      	mov	r3, r2
 800183e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	f040 80db 	bne.w	8001a04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2C_Master_Receive+0x30>
 8001858:	2302      	movs	r3, #2
 800185a:	e0d4      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001864:	f7ff fb14 	bl	8000e90 <HAL_GetTick>
 8001868:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2319      	movs	r3, #25
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fd82 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0bf      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2222      	movs	r2, #34	; 0x22
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2210      	movs	r2, #16
 8001892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	2bff      	cmp	r3, #255	; 0xff
 80018b6:	d90e      	bls.n	80018d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	8979      	ldrh	r1, [r7, #10]
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_I2C_Master_Receive+0x1e4>)
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fee4 	bl	800269c <I2C_TransferConfig>
 80018d4:	e06d      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_I2C_Master_Receive+0x1e4>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 fed3 	bl	800269c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018f6:	e05c      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	6a39      	ldr	r1, [r7, #32]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fdfb 	bl	80024f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e07c      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d034      	beq.n	80019b2 <HAL_I2C_Master_Receive+0x186>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d130      	bne.n	80019b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2200      	movs	r2, #0
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fd10 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e04d      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d90e      	bls.n	8001992 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	b2da      	uxtb	r2, r3
 8001980:	8979      	ldrh	r1, [r7, #10]
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fe86 	bl	800269c <I2C_TransferConfig>
 8001990:	e00f      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	8979      	ldrh	r1, [r7, #10]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fe75 	bl	800269c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d19d      	bne.n	80018f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	6a39      	ldr	r1, [r7, #32]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fd5d 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e01a      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2220      	movs	r2, #32
 80019d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_I2C_Master_Receive+0x1e8>)
 80019e4:	400b      	ands	r3, r1
 80019e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	80002400 	.word	0x80002400
 8001a14:	fe00e800 	.word	0xfe00e800

08001a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
  }
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_I2C_ER_IRQHandler+0x46>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	09db      	lsrs	r3, r3, #7
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0a9b      	lsrs	r3, r3, #10
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_I2C_ER_IRQHandler+0x74>
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	09db      	lsrs	r3, r3, #7
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f043 0208 	orr.w	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_I2C_ER_IRQHandler+0xa2>
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	09db      	lsrs	r3, r3, #7
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 030b 	and.w	r3, r3, #11
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb35 	bl	8002170 <I2C_ITError>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
 8001b42:	4613      	mov	r3, r2
 8001b44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <I2C_Slave_ISR_IT+0x24>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0f0      	b.n	8001d94 <I2C_Slave_ISR_IT+0x206>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04d      	beq.n	8001c62 <I2C_Slave_ISR_IT+0xd4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d047      	beq.n	8001c62 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d128      	bne.n	8001c2e <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b28      	cmp	r3, #40	; 0x28
 8001be6:	d108      	bne.n	8001bfa <I2C_Slave_ISR_IT+0x6c>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bee:	d104      	bne.n	8001bfa <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa68 	bl	80020c8 <I2C_ITListenCplt>
 8001bf8:	e032      	b.n	8001c60 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b29      	cmp	r3, #41	; 0x29
 8001c04:	d10e      	bne.n	8001c24 <I2C_Slave_ISR_IT+0x96>
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c0c:	d00a      	beq.n	8001c24 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2210      	movs	r2, #16
 8001c14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fb6a 	bl	80022f0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f93f 	bl	8001ea0 <I2C_ITSlaveSeqCplt>
 8001c22:	e01d      	b.n	8001c60 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001c2c:	e09a      	b.n	8001d64 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2210      	movs	r2, #16
 8001c34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f043 0204 	orr.w	r2, r3, #4
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <I2C_Slave_ISR_IT+0xc4>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4e:	f040 8089 	bne.w	8001d64 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fa89 	bl	8002170 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c5e:	e081      	b.n	8001d64 <I2C_Slave_ISR_IT+0x1d6>
 8001c60:	e080      	b.n	8001d64 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d034      	beq.n	8001cd8 <I2C_Slave_ISR_IT+0x14a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02e      	beq.n	8001cd8 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01c      	beq.n	8001cbe <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d14f      	bne.n	8001d68 <I2C_Slave_ISR_IT+0x1da>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cce:	d04b      	beq.n	8001d68 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f8e5 	bl	8001ea0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001cd6:	e047      	b.n	8001d68 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <I2C_Slave_ISR_IT+0x16c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001cf0:	6979      	ldr	r1, [r7, #20]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f852 	bl	8001d9c <I2C_ITAddrCplt>
 8001cf8:	e037      	b.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d031      	beq.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02b      	beq.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d018      	beq.n	8001d4e <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001d4c:	e00d      	b.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d002      	beq.n	8001d5c <I2C_Slave_ISR_IT+0x1ce>
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f89f 	bl	8001ea0 <I2C_ITSlaveSeqCplt>
 8001d62:	e002      	b.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8001d64:	bf00      	nop
 8001d66:	e000      	b.n	8001d6a <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8001d68:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <I2C_Slave_ISR_IT+0x1fc>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d82:	6979      	ldr	r1, [r7, #20]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f8c9 	bl	8001f1c <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001db2:	2b28      	cmp	r3, #40	; 0x28
 8001db4:	d168      	bne.n	8001e88 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001dd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001df0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d137      	bne.n	8001e6a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	09db      	lsrs	r3, r3, #7
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	89bb      	ldrh	r3, [r7, #12]
 8001e02:	4053      	eors	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f003 0306 	and.w	r3, r3, #6
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11c      	bne.n	8001e48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d139      	bne.n	8001e98 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e3a:	89ba      	ldrh	r2, [r7, #12]
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fe78 	bl	8001b36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e46:	e027      	b.n	8001e98 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fc52 	bl	80026f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e5c:	89ba      	ldrh	r2, [r7, #12]
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fe67 	bl	8001b36 <HAL_I2C_AddrCallback>
}
 8001e68:	e016      	b.n	8001e98 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fc43 	bl	80026f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e7a:	89ba      	ldrh	r2, [r7, #12]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fe58 	bl	8001b36 <HAL_I2C_AddrCallback>
}
 8001e86:	e007      	b.n	8001e98 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b29      	cmp	r3, #41	; 0x29
 8001eba:	d112      	bne.n	8001ee2 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2228      	movs	r2, #40	; 0x28
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2221      	movs	r2, #33	; 0x21
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fc13 	bl	80026f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fe17 	bl	8001b0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001ee0:	e017      	b.n	8001f12 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b2a      	cmp	r3, #42	; 0x2a
 8001eec:	d111      	bne.n	8001f12 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2228      	movs	r2, #40	; 0x28
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2222      	movs	r2, #34	; 0x22
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001efc:	2102      	movs	r1, #2
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fbfa 	bl	80026f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fe08 	bl	8001b22 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001f3a:	2107      	movs	r1, #7
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fbdb 	bl	80026f8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f50:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <I2C_ITSlaveCplt+0x1a4>)
 8001f5e:	400b      	ands	r3, r1
 8001f60:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9c4 	bl	80022f0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0b9b      	lsrs	r3, r3, #14
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d018      	beq.n	8001fae <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f8a:	e010      	b.n	8001fae <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0bdb      	lsrs	r3, r3, #15
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f043 0204 	orr.w	r2, r3, #4
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f89b 	bl	8002170 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b28      	cmp	r3, #40	; 0x28
 8002044:	d138      	bne.n	80020b8 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f83d 	bl	80020c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800204e:	e033      	b.n	80020b8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002058:	d011      	beq.n	800207e <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff20 	bl	8001ea0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <I2C_ITSlaveCplt+0x1a8>)
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fd6b 	bl	8001b52 <HAL_I2C_ListenCpltCallback>
}
 800207c:	e01c      	b.n	80020b8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b22      	cmp	r3, #34	; 0x22
 8002088:	d10b      	bne.n	80020a2 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fd41 	bl	8001b22 <HAL_I2C_SlaveRxCpltCallback>
}
 80020a0:	e00a      	b.n	80020b8 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd2b 	bl	8001b0e <HAL_I2C_SlaveTxCpltCallback>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	fe00e800 	.word	0xfe00e800
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <I2C_ITListenCplt+0xa4>)
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d022      	beq.n	8002146 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002146:	2107      	movs	r1, #7
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fad5 	bl	80026f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2210      	movs	r2, #16
 8002154:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fcf7 	bl	8001b52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	ffff0000 	.word	0xffff0000

08002170 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <I2C_ITError+0x174>)
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b28      	cmp	r3, #40	; 0x28
 80021a6:	d005      	beq.n	80021b4 <I2C_ITError+0x44>
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b29      	cmp	r3, #41	; 0x29
 80021ac:	d002      	beq.n	80021b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b2a      	cmp	r3, #42	; 0x2a
 80021b2:	d10e      	bne.n	80021d2 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021b4:	2103      	movs	r1, #3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa9e 	bl	80026f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2228      	movs	r2, #40	; 0x28
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a46      	ldr	r2, [pc, #280]	; (80022e8 <I2C_ITError+0x178>)
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
 80021d0:	e013      	b.n	80021fa <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021d2:	2107      	movs	r1, #7
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa8f 	bl	80026f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b60      	cmp	r3, #96	; 0x60
 80021e4:	d003      	beq.n	80021ee <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002208:	d123      	bne.n	8002252 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002218:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d05c      	beq.n	80022dc <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	4a31      	ldr	r2, [pc, #196]	; (80022ec <I2C_ITError+0x17c>)
 8002228:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ff69 	bl	800110e <HAL_DMA_Abort_IT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d04c      	beq.n	80022dc <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002250:	e044      	b.n	80022dc <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002260:	d123      	bne.n	80022aa <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002270:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d030      	beq.n	80022dc <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <I2C_ITError+0x17c>)
 8002280:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ff3d 	bl	800110e <HAL_DMA_Abort_IT>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a4:	4610      	mov	r0, r2
 80022a6:	4798      	blx	r3
}
 80022a8:	e018      	b.n	80022dc <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b60      	cmp	r3, #96	; 0x60
 80022b4:	d10b      	bne.n	80022ce <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fc57 	bl	8001b7a <HAL_I2C_AbortCpltCallback>
}
 80022cc:	e006      	b.n	80022dc <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fc45 	bl	8001b66 <HAL_I2C_ErrorCallback>
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	ffff0000 	.word	0xffff0000
 80022e8:	08001b8f 	.word	0x08001b8f
 80022ec:	08002339 	.word	0x08002339

080022f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d103      	bne.n	800230e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d007      	beq.n	800232c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	619a      	str	r2, [r3, #24]
  }
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	2200      	movs	r2, #0
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2200      	movs	r2, #0
 8002354:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b60      	cmp	r3, #96	; 0x60
 8002360:	d107      	bne.n	8002372 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fc05 	bl	8001b7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002370:	e002      	b.n	8002378 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fbf7 	bl	8001b66 <HAL_I2C_ErrorCallback>
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e022      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d01e      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe fd79 	bl	8000e90 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00f      	b.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d0cd      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240c:	e02c      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8dc 	bl	80025d0 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02a      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d01e      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fd31 	bl	8000e90 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1cb      	bne.n	800240e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e028      	b.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f89c 	bl	80025d0 <I2C_IsAcknowledgeFailed>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e026      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7fe fcf5 	bl	8000e90 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1cf      	bne.n	800248e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002504:	e055      	b.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f860 	bl	80025d0 <I2C_IsAcknowledgeFailed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e053      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d129      	bne.n	800257c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d105      	bne.n	8002542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e03f      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002556:	400b      	ands	r3, r1
 8002558:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e022      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257c:	f7fe fc88 	bl	8000e90 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d302      	bcc.n	8002592 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e007      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d1a2      	bne.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d151      	bne.n	800268e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ea:	e022      	b.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d01e      	beq.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f4:	f7fe fc4c 	bl	8000e90 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d302      	bcc.n	800260a <I2C_IsAcknowledgeFailed+0x3a>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d113      	bne.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e02e      	b.n	8002690 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d1d5      	bne.n	80025ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fe4d 	bl	80022f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <I2C_IsAcknowledgeFailed+0xc8>)
 8002662:	400b      	ands	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	4613      	mov	r3, r2
 80026ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	0d5b      	lsrs	r3, r3, #21
 80026b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <I2C_TransferConfig+0x58>)
 80026be:	430b      	orrs	r3, r1
 80026c0:	43db      	mvns	r3, r3
 80026c2:	ea02 0103 	and.w	r1, r2, r3
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	03ff63ff 	.word	0x03ff63ff

080026f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00f      	beq.n	8002732 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002718:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002726:	2b28      	cmp	r3, #40	; 0x28
 8002728:	d003      	beq.n	8002732 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002730:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00f      	beq.n	800275c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002742:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002750:	2b28      	cmp	r3, #40	; 0x28
 8002752:	d003      	beq.n	800275c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800275a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800276c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	f003 0311 	and.w	r3, r3, #17
 8002774:	2b11      	cmp	r3, #17
 8002776:	d103      	bne.n	8002780 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800277e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	f003 0312 	and.w	r3, r3, #18
 8002786:	2b12      	cmp	r3, #18
 8002788:	d103      	bne.n	8002792 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	f003 0312 	and.w	r3, r3, #18
 8002798:	2b12      	cmp	r3, #18
 800279a:	d103      	bne.n	80027a4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d138      	bne.n	800284a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e032      	b.n	800284c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2224      	movs	r2, #36	; 0x24
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002814:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
  }
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	d139      	bne.n	80028e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002878:	2302      	movs	r3, #2
 800287a:	e033      	b.n	80028e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	b08f      	sub	sp, #60	; 0x3c
 80028f4:	af0a      	add	r7, sp, #40	; 0x28
 80028f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e10a      	b.n	8002b18 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f004 fbfc 	bl	8007114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2203      	movs	r2, #3
 8002920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f003 f93b 	bl	8005ba4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	687e      	ldr	r6, [r7, #4]
 8002936:	466d      	mov	r5, sp
 8002938:	f106 0410 	add.w	r4, r6, #16
 800293c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800293e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002948:	e885 0003 	stmia.w	r5, {r0, r1}
 800294c:	1d33      	adds	r3, r6, #4
 800294e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002950:	6838      	ldr	r0, [r7, #0]
 8002952:	f003 f8cf 	bl	8005af4 <USB_CoreInit>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d7      	b.n	8002b18 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f003 f929 	bl	8005bc6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e04a      	b.n	8002a10 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	333d      	adds	r3, #61	; 0x3d
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	333c      	adds	r3, #60	; 0x3c
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	b298      	uxth	r0, r3
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3342      	adds	r3, #66	; 0x42
 80029b6:	4602      	mov	r2, r0
 80029b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	333f      	adds	r3, #63	; 0x3f
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3344      	adds	r3, #68	; 0x44
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3348      	adds	r3, #72	; 0x48
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3350      	adds	r3, #80	; 0x50
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3af      	bcc.n	800297a <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e044      	b.n	8002aaa <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3b5      	bcc.n	8002a20 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	687e      	ldr	r6, [r7, #4]
 8002abc:	466d      	mov	r5, sp
 8002abe:	f106 0410 	add.w	r4, r6, #16
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad2:	1d33      	adds	r3, r6, #4
 8002ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f003 f8a0 	bl	8005c1c <USB_DevInit>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e014      	b.n	8002b18 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f80a 	bl	8002b20 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 fa60 	bl	8005fd6 <USB_DevDisconnect>

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	10000003 	.word	0x10000003

08002b68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e25c      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b96      	ldr	r3, [pc, #600]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb8:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x62>
 8002bc4:	4b90      	ldr	r3, [pc, #576]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b8d      	ldr	r3, [pc, #564]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x130>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e236      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x7a>
 8002bf4:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a83      	ldr	r2, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x9c>
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7b      	ldr	r2, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a72      	ldr	r2, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c48:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6b      	ldr	r2, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f912 	bl	8000e90 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe f90e 	bl	8000e90 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1ea      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe f8fe 	bl	8000e90 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe f8fa 	bl	8000e90 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1d6      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x110>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d069      	beq.n	8002d9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x190>
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1aa      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	493d      	ldr	r1, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e040      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d023      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f8b0 	bl	8000e90 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe f8ac 	bl	8000e90 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e188      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f88c 	bl	8000e90 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe f888 	bl	8000e90 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e164      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d038      	beq.n	8002e18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f869 	bl	8000e90 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f865 	bl	8000e90 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e141      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x23a>
 8002de0:	e01a      	b.n	8002e18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe f84f 	bl	8000e90 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe f84b 	bl	8000e90 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d903      	bls.n	8002e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e127      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
 8002e08:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b94      	ldr	r3, [pc, #592]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ee      	bne.n	8002df6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a4 	beq.w	8002f6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b8e      	ldr	r3, [pc, #568]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a8a      	ldr	r2, [pc, #552]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a81      	ldr	r2, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f813 	bl	8000e90 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f80f 	bl	8000e90 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0eb      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	4b78      	ldr	r3, [pc, #480]	; (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x31a>
 8002e94:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a71      	ldr	r2, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	e02d      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x33c>
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	e01c      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x35e>
 8002ecc:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e00b      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fd ffc3 	bl	8000e90 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fd ffbf 	bl	8000e90 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e099      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x386>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fd ffad 	bl	8000e90 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fd ffa9 	bl	8000e90 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e083      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a3e      	ldr	r2, [pc, #248]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06f      	beq.n	8003056 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f76:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d067      	beq.n	8003052 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d149      	bne.n	800301e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a34      	ldr	r2, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fd ff7b 	bl	8000e90 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fd ff77 	bl	8000e90 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e053      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002fe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8002ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd ff4b 	bl	8000e90 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fd ff47 	bl	8000e90 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e023      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x476>
 800301c:	e01b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8003024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd ff31 	bl	8000e90 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fd ff2d 	bl	8000e90 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e009      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x4d8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x4aa>
 8003050:	e001      	b.n	8003056 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0ce      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b69      	ldr	r3, [pc, #420]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b66      	ldr	r3, [pc, #408]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 020f 	bic.w	r2, r3, #15
 8003096:	4964      	ldr	r1, [pc, #400]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b6      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b52      	ldr	r3, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494c      	ldr	r1, [pc, #304]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d040      	beq.n	800318c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d115      	bne.n	800314a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07d      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e071      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e069      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4935      	ldr	r1, [pc, #212]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315c:	f7fd fe98 	bl	8000e90 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fd fe94 	bl	8000e90 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e051      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d210      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 020f 	bic.w	r2, r3, #15
 80031a2:	4921      	ldr	r1, [pc, #132]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e030      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4915      	ldr	r1, [pc, #84]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490d      	ldr	r1, [pc, #52]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f81d 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031fe:	4601      	mov	r1, r0
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	fa21 f303 	lsr.w	r3, r1, r3
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fdf6 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08007d0c 	.word	0x08007d0c
 8003234:	20000008 	.word	0x20000008

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d007      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x32>
 800325a:	2b08      	cmp	r3, #8
 800325c:	d008      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x38>
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b4 	bne.w	80033cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003266:	60bb      	str	r3, [r7, #8]
       break;
 8003268:	e0b3      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800326c:	60bb      	str	r3, [r7, #8]
      break;
 800326e:	e0b0      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04a      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea03 0501 	and.w	r5, r3, r1
 800329c:	ea04 0602 	and.w	r6, r4, r2
 80032a0:	4629      	mov	r1, r5
 80032a2:	4632      	mov	r2, r6
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	4619      	mov	r1, r3
 80032b6:	4622      	mov	r2, r4
 80032b8:	1b49      	subs	r1, r1, r5
 80032ba:	eb62 0206 	sbc.w	r2, r2, r6
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0194      	lsls	r4, r2, #6
 80032c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032cc:	018b      	lsls	r3, r1, #6
 80032ce:	1a5b      	subs	r3, r3, r1
 80032d0:	eb64 0402 	sbc.w	r4, r4, r2
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	195b      	adds	r3, r3, r5
 80032ea:	eb44 0406 	adc.w	r4, r4, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	0262      	lsls	r2, r4, #9
 80032f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032fc:	0259      	lsls	r1, r3, #9
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	4618      	mov	r0, r3
 8003304:	4621      	mov	r1, r4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	461a      	mov	r2, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f7fd fbec 	bl	8000aec <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e049      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	f240 11ff 	movw	r1, #511	; 0x1ff
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	ea04 0602 	and.w	r6, r4, r2
 8003336:	4629      	mov	r1, r5
 8003338:	4632      	mov	r2, r6
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	0154      	lsls	r4, r2, #5
 8003344:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003348:	014b      	lsls	r3, r1, #5
 800334a:	4619      	mov	r1, r3
 800334c:	4622      	mov	r2, r4
 800334e:	1b49      	subs	r1, r1, r5
 8003350:	eb62 0206 	sbc.w	r2, r2, r6
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	0194      	lsls	r4, r2, #6
 800335e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	1a5b      	subs	r3, r3, r1
 8003366:	eb64 0402 	sbc.w	r4, r4, r2
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	00e2      	lsls	r2, r4, #3
 8003374:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003378:	00d9      	lsls	r1, r3, #3
 800337a:	460b      	mov	r3, r1
 800337c:	4614      	mov	r4, r2
 800337e:	195b      	adds	r3, r3, r5
 8003380:	eb44 0406 	adc.w	r4, r4, r6
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	02a2      	lsls	r2, r4, #10
 800338e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003392:	0299      	lsls	r1, r3, #10
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	4618      	mov	r0, r3
 800339a:	4621      	mov	r1, r4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f04f 0400 	mov.w	r4, #0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	f7fd fba1 	bl	8000aec <__aeabi_uldivmod>
 80033aa:	4603      	mov	r3, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000008 	.word	0x20000008

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4601      	mov	r1, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08007d1c 	.word	0x08007d1c

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4601      	mov	r1, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4a03      	ldr	r2, [pc, #12]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	08007d1c 	.word	0x08007d1c

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348c:	4964      	ldr	r1, [pc, #400]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	4959      	ldr	r1, [pc, #356]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c8:	d101      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d017      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e6:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	494a      	ldr	r1, [pc, #296]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 808b 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fd fc9a 	bl	8000e90 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fd fc96 	bl	8000e90 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e355      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003572:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d035      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d02e      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d114      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fc5e 	bl	8000e90 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fd fc5a 	bl	8000e90 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e317      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d111      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003616:	400b      	ands	r3, r1
 8003618:	4901      	ldr	r1, [pc, #4]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
 800361e:	e00b      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000
 8003628:	0ffffcff 	.word	0x0ffffcff
 800362c:	4bb0      	ldr	r3, [pc, #704]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4aaf      	ldr	r2, [pc, #700]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	4bad      	ldr	r3, [pc, #692]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800363a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	49aa      	ldr	r1, [pc, #680]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003656:	4ba6      	ldr	r3, [pc, #664]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365c:	4aa4      	ldr	r2, [pc, #656]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003666:	4ba2      	ldr	r3, [pc, #648]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	499f      	ldr	r1, [pc, #636]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003684:	4b9a      	ldr	r3, [pc, #616]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003692:	4997      	ldr	r1, [pc, #604]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a6:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	498e      	ldr	r1, [pc, #568]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c8:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	4986      	ldr	r1, [pc, #536]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ea:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	497d      	ldr	r1, [pc, #500]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b78      	ldr	r3, [pc, #480]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4975      	ldr	r1, [pc, #468]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372e:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f023 020c 	bic.w	r2, r3, #12
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	496c      	ldr	r1, [pc, #432]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003750:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4964      	ldr	r1, [pc, #400]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	495b      	ldr	r1, [pc, #364]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003794:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	4953      	ldr	r1, [pc, #332]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	494a      	ldr	r1, [pc, #296]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	4942      	ldr	r1, [pc, #264]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	4939      	ldr	r1, [pc, #228]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800381c:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	4931      	ldr	r1, [pc, #196]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384c:	4928      	ldr	r1, [pc, #160]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800387e:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	4918      	ldr	r1, [pc, #96]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b0:	490f      	ldr	r1, [pc, #60]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c6:	f040 80d8 	bne.w	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d6:	f7fd fadb 	bl	8000e90 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038de:	f7fd fad7 	bl	8000e90 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d903      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e196      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80038f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f4:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d021      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11d      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003914:	4b64      	ldr	r3, [pc, #400]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003922:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	071b      	lsls	r3, r3, #28
 8003948:	4957      	ldr	r1, [pc, #348]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02e      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397a:	d129      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800397c:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800397e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003990:	0f1b      	lsrs	r3, r3, #28
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	019a      	lsls	r2, r3, #6
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	071b      	lsls	r3, r3, #28
 80039b0:	493d      	ldr	r1, [pc, #244]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039be:	f023 021f 	bic.w	r2, r3, #31
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	3b01      	subs	r3, #1
 80039c8:	4937      	ldr	r1, [pc, #220]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01d      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039dc:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	0e1b      	lsrs	r3, r3, #24
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f0:	0f1b      	lsrs	r3, r3, #28
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	019a      	lsls	r2, r3, #6
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	071b      	lsls	r3, r3, #28
 8003a10:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d011      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	019a      	lsls	r2, r3, #6
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	061b      	lsls	r3, r3, #24
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	071b      	lsls	r3, r3, #28
 8003a40:	4919      	ldr	r1, [pc, #100]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a54:	f7fd fa1c 	bl	8000e90 <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a5c:	f7fd fa18 	bl	8000e90 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e0d7      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f040 80cd 	bne.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fd f9ff 	bl	8000e90 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a96:	f7fd f9fb 	bl	8000e90 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d903      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0ba      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003aa8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aac:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d0ed      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02e      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d12a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ae2:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	0f1b      	lsrs	r3, r3, #28
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	019a      	lsls	r2, r3, #6
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	4944      	ldr	r1, [pc, #272]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	493d      	ldr	r1, [pc, #244]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b4c:	d11d      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	0e1b      	lsrs	r3, r3, #24
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	0f1b      	lsrs	r3, r3, #28
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	019a      	lsls	r2, r3, #6
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	061b      	lsls	r3, r3, #24
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	4929      	ldr	r1, [pc, #164]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d028      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	0e1b      	lsrs	r3, r3, #24
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	019a      	lsls	r2, r3, #6
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	4917      	ldr	r1, [pc, #92]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4911      	ldr	r1, [pc, #68]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0e      	ldr	r2, [pc, #56]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd f94c 	bl	8000e90 <HAL_GetTick>
 8003bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bfc:	f7fd f948 	bl	8000e90 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e007      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1a:	d1ef      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e01d      	b.n	8003c7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f003 f91e 	bl	8006e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 fba6 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e01d      	b.n	8003cd0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f815 	bl	8003cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 fb7b 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fef4 	bl	8004aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_TIM_PWM_Start+0x7c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_TIM_PWM_Start+0x2c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_TIM_PWM_Start+0x80>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_PWM_Start+0x30>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_PWM_Start+0x32>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_TIM_PWM_Start+0x84>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d00b      	beq.n	8003d5c <HAL_TIM_PWM_Start+0x70>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d007      	beq.n	8003d5c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40010400 	.word	0x40010400
 8003d70:	00010007 	.word	0x00010007

08003d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0202 	mvn.w	r2, #2
 8003da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fae2 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fad4 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fae5 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0204 	mvn.w	r2, #4
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fab8 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 faaa 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fabb 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0208 	mvn.w	r2, #8
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa8e 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa80 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa91 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0210 	mvn.w	r2, #16
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa64 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa56 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa67 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0201 	mvn.w	r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fa30 	bl	8004358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fe70 	bl	8004c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d10e      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fe63 	bl	8004c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fa15 	bl	80043a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d10e      	bne.n	8003faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0220 	mvn.w	r2, #32
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fe23 	bl	8004bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e105      	b.n	80041da <HAL_TIM_PWM_ConfigChannel+0x226>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b14      	cmp	r3, #20
 8003fe2:	f200 80f0 	bhi.w	80041c6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	080041c7 	.word	0x080041c7
 8003ff4:	080041c7 	.word	0x080041c7
 8003ff8:	080041c7 	.word	0x080041c7
 8003ffc:	08004081 	.word	0x08004081
 8004000:	080041c7 	.word	0x080041c7
 8004004:	080041c7 	.word	0x080041c7
 8004008:	080041c7 	.word	0x080041c7
 800400c:	080040c3 	.word	0x080040c3
 8004010:	080041c7 	.word	0x080041c7
 8004014:	080041c7 	.word	0x080041c7
 8004018:	080041c7 	.word	0x080041c7
 800401c:	08004103 	.word	0x08004103
 8004020:	080041c7 	.word	0x080041c7
 8004024:	080041c7 	.word	0x080041c7
 8004028:	080041c7 	.word	0x080041c7
 800402c:	08004145 	.word	0x08004145
 8004030:	080041c7 	.word	0x080041c7
 8004034:	080041c7 	.word	0x080041c7
 8004038:	080041c7 	.word	0x080041c7
 800403c:	08004185 	.word	0x08004185
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fa58 	bl	80044fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6999      	ldr	r1, [r3, #24]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
      break;
 800407e:	e0a3      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 faaa 	bl	80045e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	619a      	str	r2, [r3, #24]
      break;
 80040c0:	e082      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fb01 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0208 	orr.w	r2, r2, #8
 80040dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0204 	bic.w	r2, r2, #4
 80040ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	61da      	str	r2, [r3, #28]
      break;
 8004100:	e062      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fb57 	bl	80047bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	021a      	lsls	r2, r3, #8
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	61da      	str	r2, [r3, #28]
      break;
 8004142:	e041      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fb8e 	bl	800486c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004182:	e021      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fbc0 	bl	8004910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80041c6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop

080041e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_ConfigClockSource+0x18>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0a6      	b.n	800434a <HAL_TIM_ConfigClockSource+0x166>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <HAL_TIM_ConfigClockSource+0x170>)
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d067      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0x120>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d80b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x6c>
 8004238:	2b10      	cmp	r3, #16
 800423a:	d073      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x140>
 800423c:	2b10      	cmp	r3, #16
 800423e:	d802      	bhi.n	8004246 <HAL_TIM_ConfigClockSource+0x62>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d06f      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004244:	e078      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004246:	2b20      	cmp	r3, #32
 8004248:	d06c      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x140>
 800424a:	2b30      	cmp	r3, #48	; 0x30
 800424c:	d06a      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800424e:	e073      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d00d      	beq.n	8004270 <HAL_TIM_ConfigClockSource+0x8c>
 8004254:	2b70      	cmp	r3, #112	; 0x70
 8004256:	d804      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x7e>
 8004258:	2b50      	cmp	r3, #80	; 0x50
 800425a:	d033      	beq.n	80042c4 <HAL_TIM_ConfigClockSource+0xe0>
 800425c:	2b60      	cmp	r3, #96	; 0x60
 800425e:	d041      	beq.n	80042e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004260:	e06a      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d066      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x152>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d017      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800426e:	e063      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6899      	ldr	r1, [r3, #8]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f000 fc14 	bl	8004aac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004292:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	609a      	str	r2, [r3, #8]
      break;
 800429c:	e04c      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f000 fbfd 	bl	8004aac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c0:	609a      	str	r2, [r3, #8]
      break;
 80042c2:	e039      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	461a      	mov	r2, r3
 80042d2:	f000 fb71 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2150      	movs	r1, #80	; 0x50
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fbca 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80042e2:	e029      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f000 fb90 	bl	8004a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2160      	movs	r1, #96	; 0x60
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fbba 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004302:	e019      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	461a      	mov	r2, r3
 8004312:	f000 fb51 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2140      	movs	r1, #64	; 0x40
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fbaa 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004322:	e009      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 fba1 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004334:	e000      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	fffeff88 	.word	0xfffeff88

08004358 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <TIM_Base_SetConfig+0x114>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00f      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3d      	ldr	r2, [pc, #244]	; (80044d4 <TIM_Base_SetConfig+0x118>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <TIM_Base_SetConfig+0x11c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3b      	ldr	r2, [pc, #236]	; (80044dc <TIM_Base_SetConfig+0x120>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <TIM_Base_SetConfig+0x124>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d108      	bne.n	800440e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2f      	ldr	r2, [pc, #188]	; (80044d0 <TIM_Base_SetConfig+0x114>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d02b      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d027      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <TIM_Base_SetConfig+0x118>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d023      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <TIM_Base_SetConfig+0x11c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01f      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <TIM_Base_SetConfig+0x120>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01b      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <TIM_Base_SetConfig+0x124>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d017      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a28      	ldr	r2, [pc, #160]	; (80044e4 <TIM_Base_SetConfig+0x128>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00f      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <TIM_Base_SetConfig+0x130>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <TIM_Base_SetConfig+0x134>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <TIM_Base_SetConfig+0x138>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <TIM_Base_SetConfig+0x114>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <TIM_Base_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010400 	.word	0x40010400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800
 80044f0:	40001800 	.word	0x40001800
 80044f4:	40001c00 	.word	0x40001c00
 80044f8:	40002000 	.word	0x40002000

080044fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <TIM_OC1_SetConfig+0xd8>)
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 0302 	bic.w	r3, r3, #2
 8004544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <TIM_OC1_SetConfig+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC1_SetConfig+0x64>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a20      	ldr	r2, [pc, #128]	; (80045dc <TIM_OC1_SetConfig+0xe0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10c      	bne.n	800457a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0308 	bic.w	r3, r3, #8
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_OC1_SetConfig+0xdc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC1_SetConfig+0x8e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC1_SetConfig+0xe0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	fffeff8f 	.word	0xfffeff8f
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40010400 	.word	0x40010400

080045e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <TIM_OC2_SetConfig+0xe4>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <TIM_OC2_SetConfig+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_OC2_SetConfig+0x68>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a22      	ldr	r2, [pc, #136]	; (80046cc <TIM_OC2_SetConfig+0xec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10d      	bne.n	8004664 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <TIM_OC2_SetConfig+0xe8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC2_SetConfig+0x94>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <TIM_OC2_SetConfig+0xec>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d113      	bne.n	800469c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800467a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	feff8fff 	.word	0xfeff8fff
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <TIM_OC3_SetConfig+0xe0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC3_SetConfig+0x66>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <TIM_OC3_SetConfig+0xe8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10d      	bne.n	8004752 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC3_SetConfig+0x92>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC3_SetConfig+0xe8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d113      	bne.n	800478a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	fffeff8f 	.word	0xfffeff8f
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <TIM_OC4_SetConfig+0xa4>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a13      	ldr	r2, [pc, #76]	; (8004864 <TIM_OC4_SetConfig+0xa8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_OC4_SetConfig+0x68>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <TIM_OC4_SetConfig+0xac>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d109      	bne.n	8004838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	feff8fff 	.word	0xfeff8fff
 8004864:	40010000 	.word	0x40010000
 8004868:	40010400 	.word	0x40010400

0800486c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <TIM_OC5_SetConfig+0x98>)
 8004898:	4013      	ands	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a12      	ldr	r2, [pc, #72]	; (8004908 <TIM_OC5_SetConfig+0x9c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_OC5_SetConfig+0x5e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a11      	ldr	r2, [pc, #68]	; (800490c <TIM_OC5_SetConfig+0xa0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d109      	bne.n	80048de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	fffeff8f 	.word	0xfffeff8f
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400

08004910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <TIM_OC6_SetConfig+0x9c>)
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	051b      	lsls	r3, r3, #20
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <TIM_OC6_SetConfig+0xa0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC6_SetConfig+0x60>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <TIM_OC6_SetConfig+0xa4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d109      	bne.n	8004984 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	029b      	lsls	r3, r3, #10
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	feff8fff 	.word	0xfeff8fff
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40010400 	.word	0x40010400

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e045      	b.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d108      	bne.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e040      	b.n	8004cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 f9e6 	bl	8007020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa90 	bl	8005190 <UART_SetConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e022      	b.n	8004cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fd28 	bl	80056d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fdaf 	bl	800581c <UART_CheckIdleState>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d17f      	bne.n	8004de0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_UART_Transmit+0x24>
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e078      	b.n	8004de2 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Transmit+0x36>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e071      	b.n	8004de2 <HAL_UART_Transmit+0x11a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d12:	f7fc f8bd 	bl	8000e90 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d108      	bne.n	8004d44 <HAL_UART_Transmit+0x7c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e003      	b.n	8004d4c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d4c:	e02c      	b.n	8004da8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fd8e 	bl	800587a <UART_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e03c      	b.n	8004de2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1cc      	bne.n	8004d4e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fd5b 	bl	800587a <UART_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e009      	b.n	8004de2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	f040 808a 	bne.w	8004f18 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Receive_IT+0x24>
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e082      	b.n	8004f1a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Receive_IT+0x36>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e07b      	b.n	8004f1a <HAL_UART_Receive_IT+0x12e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4e:	d10e      	bne.n	8004e6e <HAL_UART_Receive_IT+0x82>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <HAL_UART_Receive_IT+0x78>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e62:	e02d      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e6c:	e028      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <HAL_UART_Receive_IT+0xa6>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_UART_Receive_IT+0x9c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e86:	e01b      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	227f      	movs	r2, #127	; 0x7f
 8004e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e90:	e016      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_UART_Receive_IT+0xcc>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_UART_Receive_IT+0xc2>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	227f      	movs	r2, #127	; 0x7f
 8004ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eac:	e008      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	223f      	movs	r2, #63	; 0x3f
 8004eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Receive_IT+0xd4>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2222      	movs	r2, #34	; 0x22
 8004eca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d107      	bne.n	8004ef6 <HAL_UART_Receive_IT+0x10a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_UART_Receive_IT+0x13c>)
 8004ef2:	661a      	str	r2, [r3, #96]	; 0x60
 8004ef4:	e002      	b.n	8004efc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <HAL_UART_Receive_IT+0x140>)
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004f12:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	08005a4f 	.word	0x08005a4f
 8004f2c:	080059a9 	.word	0x080059a9

08004f30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d113      	bne.n	8004f86 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80eb 	beq.w	8005152 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
      }
      return;
 8004f84:	e0e5      	b.n	8005152 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80c0 	beq.w	800510e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80b5 	beq.w	800510e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00e      	beq.n	8004fcc <HAL_UART_IRQHandler+0x9c>
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xc4>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00e      	beq.n	800501c <HAL_UART_IRQHandler+0xec>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2204      	movs	r2, #4
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005014:	f043 0202 	orr.w	r2, r3, #2
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d013      	beq.n	800504e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2208      	movs	r2, #8
 8005040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d07f      	beq.n	8005156 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d004      	beq.n	8005098 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005094:	2b00      	cmp	r3, #0
 8005096:	d031      	beq.n	80050fc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fc36 	bl	800590a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d123      	bne.n	80050f4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_UART_IRQHandler+0x234>)
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc f81c 	bl	800110e <HAL_DMA_Abort_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d016      	beq.n	800510a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050e6:	4610      	mov	r0, r2
 80050e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ea:	e00e      	b.n	800510a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f845 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f2:	e00a      	b.n	800510a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f841 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fa:	e006      	b.n	800510a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f83d 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005108:	e025      	b.n	8005156 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510a:	bf00      	nop
    return;
 800510c:	e023      	b.n	8005156 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
    }
    return;
 8005132:	e012      	b.n	800515a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <HAL_UART_IRQHandler+0x22c>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fc14 	bl	8005976 <UART_EndTransmit_IT>
    return;
 800514e:	bf00      	nop
 8005150:	e004      	b.n	800515c <HAL_UART_IRQHandler+0x22c>
      return;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <HAL_UART_IRQHandler+0x22c>
    return;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_UART_IRQHandler+0x22c>
    return;
 800515a:	bf00      	nop
  }

}
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	0800594b 	.word	0x0800594b

08005168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4bb1      	ldr	r3, [pc, #708]	; (8005484 <UART_SetConfig+0x2f4>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a9f      	ldr	r2, [pc, #636]	; (8005488 <UART_SetConfig+0x2f8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d121      	bne.n	8005254 <UART_SetConfig+0xc4>
 8005210:	4b9e      	ldr	r3, [pc, #632]	; (800548c <UART_SetConfig+0x2fc>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b03      	cmp	r3, #3
 800521c:	d816      	bhi.n	800524c <UART_SetConfig+0xbc>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x94>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005235 	.word	0x08005235
 8005228:	08005241 	.word	0x08005241
 800522c:	0800523b 	.word	0x0800523b
 8005230:	08005247 	.word	0x08005247
 8005234:	2301      	movs	r3, #1
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e151      	b.n	80054de <UART_SetConfig+0x34e>
 800523a:	2302      	movs	r3, #2
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e14e      	b.n	80054de <UART_SetConfig+0x34e>
 8005240:	2304      	movs	r3, #4
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e14b      	b.n	80054de <UART_SetConfig+0x34e>
 8005246:	2308      	movs	r3, #8
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e148      	b.n	80054de <UART_SetConfig+0x34e>
 800524c:	2310      	movs	r3, #16
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	bf00      	nop
 8005252:	e144      	b.n	80054de <UART_SetConfig+0x34e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a8d      	ldr	r2, [pc, #564]	; (8005490 <UART_SetConfig+0x300>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d134      	bne.n	80052c8 <UART_SetConfig+0x138>
 800525e:	4b8b      	ldr	r3, [pc, #556]	; (800548c <UART_SetConfig+0x2fc>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d829      	bhi.n	80052c0 <UART_SetConfig+0x130>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0xe4>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	080052a9 	.word	0x080052a9
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052b5 	.word	0x080052b5
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052af 	.word	0x080052af
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c1 	.word	0x080052c1
 80052a4:	080052bb 	.word	0x080052bb
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e117      	b.n	80054de <UART_SetConfig+0x34e>
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e114      	b.n	80054de <UART_SetConfig+0x34e>
 80052b4:	2304      	movs	r3, #4
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e111      	b.n	80054de <UART_SetConfig+0x34e>
 80052ba:	2308      	movs	r3, #8
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e10e      	b.n	80054de <UART_SetConfig+0x34e>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	bf00      	nop
 80052c6:	e10a      	b.n	80054de <UART_SetConfig+0x34e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a71      	ldr	r2, [pc, #452]	; (8005494 <UART_SetConfig+0x304>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d120      	bne.n	8005314 <UART_SetConfig+0x184>
 80052d2:	4b6e      	ldr	r3, [pc, #440]	; (800548c <UART_SetConfig+0x2fc>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d00f      	beq.n	8005300 <UART_SetConfig+0x170>
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d802      	bhi.n	80052ea <UART_SetConfig+0x15a>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <UART_SetConfig+0x164>
 80052e8:	e010      	b.n	800530c <UART_SetConfig+0x17c>
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d005      	beq.n	80052fa <UART_SetConfig+0x16a>
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d009      	beq.n	8005306 <UART_SetConfig+0x176>
 80052f2:	e00b      	b.n	800530c <UART_SetConfig+0x17c>
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0f1      	b.n	80054de <UART_SetConfig+0x34e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0ee      	b.n	80054de <UART_SetConfig+0x34e>
 8005300:	2304      	movs	r3, #4
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0eb      	b.n	80054de <UART_SetConfig+0x34e>
 8005306:	2308      	movs	r3, #8
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0e8      	b.n	80054de <UART_SetConfig+0x34e>
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	bf00      	nop
 8005312:	e0e4      	b.n	80054de <UART_SetConfig+0x34e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5f      	ldr	r2, [pc, #380]	; (8005498 <UART_SetConfig+0x308>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d120      	bne.n	8005360 <UART_SetConfig+0x1d0>
 800531e:	4b5b      	ldr	r3, [pc, #364]	; (800548c <UART_SetConfig+0x2fc>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d00f      	beq.n	800534c <UART_SetConfig+0x1bc>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d802      	bhi.n	8005336 <UART_SetConfig+0x1a6>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <UART_SetConfig+0x1b0>
 8005334:	e010      	b.n	8005358 <UART_SetConfig+0x1c8>
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d005      	beq.n	8005346 <UART_SetConfig+0x1b6>
 800533a:	2bc0      	cmp	r3, #192	; 0xc0
 800533c:	d009      	beq.n	8005352 <UART_SetConfig+0x1c2>
 800533e:	e00b      	b.n	8005358 <UART_SetConfig+0x1c8>
 8005340:	2300      	movs	r3, #0
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e0cb      	b.n	80054de <UART_SetConfig+0x34e>
 8005346:	2302      	movs	r3, #2
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e0c8      	b.n	80054de <UART_SetConfig+0x34e>
 800534c:	2304      	movs	r3, #4
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e0c5      	b.n	80054de <UART_SetConfig+0x34e>
 8005352:	2308      	movs	r3, #8
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e0c2      	b.n	80054de <UART_SetConfig+0x34e>
 8005358:	2310      	movs	r3, #16
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	bf00      	nop
 800535e:	e0be      	b.n	80054de <UART_SetConfig+0x34e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a4d      	ldr	r2, [pc, #308]	; (800549c <UART_SetConfig+0x30c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d124      	bne.n	80053b4 <UART_SetConfig+0x224>
 800536a:	4b48      	ldr	r3, [pc, #288]	; (800548c <UART_SetConfig+0x2fc>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	d012      	beq.n	80053a0 <UART_SetConfig+0x210>
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d802      	bhi.n	8005386 <UART_SetConfig+0x1f6>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <UART_SetConfig+0x204>
 8005384:	e012      	b.n	80053ac <UART_SetConfig+0x21c>
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	d006      	beq.n	800539a <UART_SetConfig+0x20a>
 800538c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005390:	d009      	beq.n	80053a6 <UART_SetConfig+0x216>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x21c>
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e0a1      	b.n	80054de <UART_SetConfig+0x34e>
 800539a:	2302      	movs	r3, #2
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e09e      	b.n	80054de <UART_SetConfig+0x34e>
 80053a0:	2304      	movs	r3, #4
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e09b      	b.n	80054de <UART_SetConfig+0x34e>
 80053a6:	2308      	movs	r3, #8
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e098      	b.n	80054de <UART_SetConfig+0x34e>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	bf00      	nop
 80053b2:	e094      	b.n	80054de <UART_SetConfig+0x34e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a39      	ldr	r2, [pc, #228]	; (80054a0 <UART_SetConfig+0x310>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d124      	bne.n	8005408 <UART_SetConfig+0x278>
 80053be:	4b33      	ldr	r3, [pc, #204]	; (800548c <UART_SetConfig+0x2fc>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d012      	beq.n	80053f4 <UART_SetConfig+0x264>
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d2:	d802      	bhi.n	80053da <UART_SetConfig+0x24a>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <UART_SetConfig+0x258>
 80053d8:	e012      	b.n	8005400 <UART_SetConfig+0x270>
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053de:	d006      	beq.n	80053ee <UART_SetConfig+0x25e>
 80053e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e4:	d009      	beq.n	80053fa <UART_SetConfig+0x26a>
 80053e6:	e00b      	b.n	8005400 <UART_SetConfig+0x270>
 80053e8:	2301      	movs	r3, #1
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e077      	b.n	80054de <UART_SetConfig+0x34e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e074      	b.n	80054de <UART_SetConfig+0x34e>
 80053f4:	2304      	movs	r3, #4
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e071      	b.n	80054de <UART_SetConfig+0x34e>
 80053fa:	2308      	movs	r3, #8
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e06e      	b.n	80054de <UART_SetConfig+0x34e>
 8005400:	2310      	movs	r3, #16
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	bf00      	nop
 8005406:	e06a      	b.n	80054de <UART_SetConfig+0x34e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <UART_SetConfig+0x314>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d124      	bne.n	800545c <UART_SetConfig+0x2cc>
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <UART_SetConfig+0x2fc>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d012      	beq.n	8005448 <UART_SetConfig+0x2b8>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d802      	bhi.n	800542e <UART_SetConfig+0x29e>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <UART_SetConfig+0x2ac>
 800542c:	e012      	b.n	8005454 <UART_SetConfig+0x2c4>
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	d006      	beq.n	8005442 <UART_SetConfig+0x2b2>
 8005434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005438:	d009      	beq.n	800544e <UART_SetConfig+0x2be>
 800543a:	e00b      	b.n	8005454 <UART_SetConfig+0x2c4>
 800543c:	2300      	movs	r3, #0
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e04d      	b.n	80054de <UART_SetConfig+0x34e>
 8005442:	2302      	movs	r3, #2
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e04a      	b.n	80054de <UART_SetConfig+0x34e>
 8005448:	2304      	movs	r3, #4
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e047      	b.n	80054de <UART_SetConfig+0x34e>
 800544e:	2308      	movs	r3, #8
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e044      	b.n	80054de <UART_SetConfig+0x34e>
 8005454:	2310      	movs	r3, #16
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	bf00      	nop
 800545a:	e040      	b.n	80054de <UART_SetConfig+0x34e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <UART_SetConfig+0x318>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d139      	bne.n	80054da <UART_SetConfig+0x34a>
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <UART_SetConfig+0x2fc>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005474:	d027      	beq.n	80054c6 <UART_SetConfig+0x336>
 8005476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547a:	d817      	bhi.n	80054ac <UART_SetConfig+0x31c>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01c      	beq.n	80054ba <UART_SetConfig+0x32a>
 8005480:	e027      	b.n	80054d2 <UART_SetConfig+0x342>
 8005482:	bf00      	nop
 8005484:	efff69f3 	.word	0xefff69f3
 8005488:	40011000 	.word	0x40011000
 800548c:	40023800 	.word	0x40023800
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
 8005498:	40004c00 	.word	0x40004c00
 800549c:	40005000 	.word	0x40005000
 80054a0:	40011400 	.word	0x40011400
 80054a4:	40007800 	.word	0x40007800
 80054a8:	40007c00 	.word	0x40007c00
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	d006      	beq.n	80054c0 <UART_SetConfig+0x330>
 80054b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054b6:	d009      	beq.n	80054cc <UART_SetConfig+0x33c>
 80054b8:	e00b      	b.n	80054d2 <UART_SetConfig+0x342>
 80054ba:	2300      	movs	r3, #0
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e00e      	b.n	80054de <UART_SetConfig+0x34e>
 80054c0:	2302      	movs	r3, #2
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e00b      	b.n	80054de <UART_SetConfig+0x34e>
 80054c6:	2304      	movs	r3, #4
 80054c8:	77fb      	strb	r3, [r7, #31]
 80054ca:	e008      	b.n	80054de <UART_SetConfig+0x34e>
 80054cc:	2308      	movs	r3, #8
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e005      	b.n	80054de <UART_SetConfig+0x34e>
 80054d2:	2310      	movs	r3, #16
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	bf00      	nop
 80054d8:	e001      	b.n	80054de <UART_SetConfig+0x34e>
 80054da:	2310      	movs	r3, #16
 80054dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e6:	d17c      	bne.n	80055e2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80054e8:	7ffb      	ldrb	r3, [r7, #31]
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d859      	bhi.n	80055a2 <UART_SetConfig+0x412>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x364>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005555 	.word	0x08005555
 8005500:	080055a3 	.word	0x080055a3
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080055a3 	.word	0x080055a3
 800550c:	080055a3 	.word	0x080055a3
 8005510:	080055a3 	.word	0x080055a3
 8005514:	0800558b 	.word	0x0800558b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005518:	f7fd ff72 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 800551c:	4603      	mov	r3, r0
 800551e:	005a      	lsls	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	441a      	add	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	61bb      	str	r3, [r7, #24]
        break;
 8005534:	e038      	b.n	80055a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005536:	f7fd ff77 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 800553a:	4603      	mov	r3, r0
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	61bb      	str	r3, [r7, #24]
        break;
 8005552:	e029      	b.n	80055a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085a      	lsrs	r2, r3, #1
 800555a:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <UART_SetConfig+0x540>)
 800555c:	4413      	add	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6852      	ldr	r2, [r2, #4]
 8005562:	fbb3 f3f2 	udiv	r3, r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	61bb      	str	r3, [r7, #24]
        break;
 800556a:	e01d      	b.n	80055a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800556c:	f7fd fe64 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8005570:	4603      	mov	r3, r0
 8005572:	005a      	lsls	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	441a      	add	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	b29b      	uxth	r3, r3
 8005586:	61bb      	str	r3, [r7, #24]
        break;
 8005588:	e00e      	b.n	80055a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	b29b      	uxth	r3, r3
 800559e:	61bb      	str	r3, [r7, #24]
        break;
 80055a0:	e002      	b.n	80055a8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
        break;
 80055a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d916      	bls.n	80055dc <UART_SetConfig+0x44c>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d212      	bcs.n	80055dc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	89fa      	ldrh	r2, [r7, #14]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e06e      	b.n	80056ba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
 80055e0:	e06b      	b.n	80056ba <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d857      	bhi.n	8005698 <UART_SetConfig+0x508>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x460>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005631 	.word	0x08005631
 80055f8:	0800564d 	.word	0x0800564d
 80055fc:	08005699 	.word	0x08005699
 8005600:	08005665 	.word	0x08005665
 8005604:	08005699 	.word	0x08005699
 8005608:	08005699 	.word	0x08005699
 800560c:	08005699 	.word	0x08005699
 8005610:	08005681 	.word	0x08005681
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005614:	f7fd fef4 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	61bb      	str	r3, [r7, #24]
        break;
 800562e:	e036      	b.n	800569e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005630:	f7fd fefa 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	b29b      	uxth	r3, r3
 8005648:	61bb      	str	r3, [r7, #24]
        break;
 800564a:	e028      	b.n	800569e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	085a      	lsrs	r2, r3, #1
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <UART_SetConfig+0x544>)
 8005654:	4413      	add	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6852      	ldr	r2, [r2, #4]
 800565a:	fbb3 f3f2 	udiv	r3, r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	61bb      	str	r3, [r7, #24]
        break;
 8005662:	e01c      	b.n	800569e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005664:	f7fd fde8 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	441a      	add	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	61bb      	str	r3, [r7, #24]
        break;
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	b29b      	uxth	r3, r3
 8005694:	61bb      	str	r3, [r7, #24]
        break;
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
        break;
 800569c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b0f      	cmp	r3, #15
 80056a2:	d908      	bls.n	80056b6 <UART_SetConfig+0x526>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d204      	bcs.n	80056b6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	e001      	b.n	80056ba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	01e84800 	.word	0x01e84800
 80056d4:	00f42400 	.word	0x00f42400

080056d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d6:	d10a      	bne.n	80057ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800582a:	f7fb fb31 	bl	8000e90 <HAL_GetTick>
 800582e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b08      	cmp	r3, #8
 800583c:	d10e      	bne.n	800585c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f814 	bl	800587a <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e00a      	b.n	8005872 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588a:	e02a      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d026      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fb fafc 	bl	8000e90 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <UART_WaitOnFlagUntilTimeout+0x30>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11b      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00f      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d0c5      	beq.n	800588c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005920:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff fc07 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fbe4 	bl	8005168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	d13a      	bne.n	8005a36 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059c8:	89bb      	ldrh	r3, [r7, #12]
 80059ca:	b2d9      	uxtb	r1, r3
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	400a      	ands	r2, r1
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d121      	bne.n	8005a46 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a10:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fe70 	bl	8006714 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a34:	e007      	b.n	8005a46 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0208 	orr.w	r2, r2, #8
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a62:	2b22      	cmp	r3, #34	; 0x22
 8005a64:	d13a      	bne.n	8005adc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a74:	89ba      	ldrh	r2, [r7, #12]
 8005a76:	89fb      	ldrh	r3, [r7, #14]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d121      	bne.n	8005aec <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ab6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fe1d 	bl	8006714 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ada:	e007      	b.n	8005aec <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	619a      	str	r2, [r3, #24]
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 001c 	add.w	r0, r7, #28
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d120      	bne.n	8005b4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <USB_CoreInit+0xac>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa60 	bl	8006008 <USB_CoreReset>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e010      	b.n	8005b70 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa54 	bl	8006008 <USB_CoreReset>
 8005b60:	4603      	mov	r3, r0
 8005b62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10b      	bne.n	8005b8e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f043 0206 	orr.w	r2, r3, #6
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9a:	b004      	add	sp, #16
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	ffbdffbf 	.word	0xffbdffbf

08005ba4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f023 0201 	bic.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e00b      	b.n	8005c0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	e001      	b.n	8005c0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e003      	b.n	8005c12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c0a:	2032      	movs	r0, #50	; 0x32
 8005c0c:	f7fb f94c 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e009      	b.n	8005c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3340      	adds	r3, #64	; 0x40
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b0e      	cmp	r3, #14
 8005c54:	d9f2      	bls.n	8005c3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d112      	bne.n	8005c82 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e005      	b.n	8005c8e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	461a      	mov	r2, r3
 8005caa:	680b      	ldr	r3, [r1, #0]
 8005cac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10c      	bne.n	8005cce <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f971 	bl	8005fa4 <USB_SetDevSpeed>
 8005cc2:	e018      	b.n	8005cf6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f96c 	bl	8005fa4 <USB_SetDevSpeed>
 8005ccc:	e013      	b.n	8005cf6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d10c      	bne.n	8005cee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d104      	bne.n	8005ce4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cda:	2100      	movs	r1, #0
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f961 	bl	8005fa4 <USB_SetDevSpeed>
 8005ce2:	e008      	b.n	8005cf6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f95c 	bl	8005fa4 <USB_SetDevSpeed>
 8005cec:	e003      	b.n	8005cf6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cee:	2103      	movs	r1, #3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f957 	bl	8005fa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cf6:	2110      	movs	r1, #16
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f90b 	bl	8005f14 <USB_FlushTxFifo>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f929 	bl	8005f60 <USB_FlushRxFifo>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e043      	b.n	8005dca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d58:	d118      	bne.n	8005d8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	e013      	b.n	8005d9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	461a      	mov	r2, r3
 8005d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e008      	b.n	8005d9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3b7      	bcc.n	8005d42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e043      	b.n	8005e60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dee:	d118      	bne.n	8005e22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e013      	b.n	8005e34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e008      	b.n	8005e34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	461a      	mov	r2, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	461a      	mov	r2, r3
 8005e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d3b7      	bcc.n	8005dd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d110      	bne.n	8005ea4 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <USB_DevInit+0x2e8>)
 8005e8c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <USB_DevInit+0x2ec>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005eb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <USB_DevInit+0x2f0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f043 0208 	orr.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d105      	bne.n	8005ef4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <USB_DevInit+0x2f4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f00:	b004      	add	sp, #16
 8005f02:	4770      	bx	lr
 8005f04:	00800100 	.word	0x00800100
 8005f08:	00010003 	.word	0x00010003
 8005f0c:	803c3800 	.word	0x803c3800
 8005f10:	40000004 	.word	0x40000004

08005f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <USB_FlushTxFifo+0x48>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e006      	b.n	8005f4e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d0f0      	beq.n	8005f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	00030d40 	.word	0x00030d40

08005f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <USB_FlushRxFifo+0x40>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e006      	b.n	8005f92 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d0f0      	beq.n	8005f72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	00030d40 	.word	0x00030d40

08005fa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005ff6:	2003      	movs	r0, #3
 8005ff8:	f7fa ff56 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a13      	ldr	r2, [pc, #76]	; (800606c <USB_CoreReset+0x64>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e01b      	b.n	800605e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	daf2      	bge.n	8006014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <USB_CoreReset+0x64>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d0f0      	beq.n	800603e <USB_CoreReset+0x36>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	00030d40 	.word	0x00030d40

08006070 <BH1750_Init>:
#include "main.h"

I2C_HandleTypeDef hi2c1;

void BH1750_Init()
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af02      	add	r7, sp, #8
	uint8_t power_on=0x01;
 8006076:	2301      	movs	r3, #1
 8006078:	71fb      	strb	r3, [r7, #7]
	uint8_t mode=0x10;
 800607a:	2310      	movs	r3, #16
 800607c:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, 0x23<<1, &power_on, 1, 0xffff);
 800607e:	1dfa      	adds	r2, r7, #7
 8006080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2301      	movs	r3, #1
 8006088:	2146      	movs	r1, #70	; 0x46
 800608a:	4808      	ldr	r0, [pc, #32]	; (80060ac <BH1750_Init+0x3c>)
 800608c:	f7fb fada 	bl	8001644 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, 0x23<<1, &mode, 1, 0xffff);
 8006090:	1dba      	adds	r2, r7, #6
 8006092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2301      	movs	r3, #1
 800609a:	2146      	movs	r1, #70	; 0x46
 800609c:	4803      	ldr	r0, [pc, #12]	; (80060ac <BH1750_Init+0x3c>)
 800609e:	f7fb fad1 	bl	8001644 <HAL_I2C_Master_Transmit>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000208 	.word	0x20000208

080060b0 <BH1750_Receive>:

float BH1750_Receive(void)
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af02      	add	r7, sp, #8
	uint8_t Data[2];
	float rslt;

	HAL_I2C_Master_Receive(&hi2c1, 0x23<<1, Data, 2, 0xffff);
 80060b6:	463a      	mov	r2, r7
 80060b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2302      	movs	r3, #2
 80060c0:	2146      	movs	r1, #70	; 0x46
 80060c2:	480f      	ldr	r0, [pc, #60]	; (8006100 <BH1750_Receive+0x50>)
 80060c4:	f7fb fbb2 	bl	800182c <HAL_I2C_Master_Receive>
	rslt=((Data[0]<<8)| Data[1])/1.2;
 80060c8:	783b      	ldrb	r3, [r7, #0]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	787a      	ldrb	r2, [r7, #1]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fa fa3f 	bl	8000554 <__aeabi_i2d>
 80060d6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <BH1750_Receive+0x54>)
 80060dc:	f7fa fbce 	bl	800087c <__aeabi_ddiv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4618      	mov	r0, r3
 80060e6:	4621      	mov	r1, r4
 80060e8:	f7fa fcb0 	bl	8000a4c <__aeabi_d2f>
 80060ec:	4603      	mov	r3, r0
 80060ee:	607b      	str	r3, [r7, #4]

	return rslt;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	ee07 3a90 	vmov	s15, r3
}
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}
 8006100:	20000208 	.word	0x20000208
 8006104:	3ff33333 	.word	0x3ff33333

08006108 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	; 0x30
 800610c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800610e:	f107 031c 	add.w	r3, r7, #28
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	609a      	str	r2, [r3, #8]
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800611e:	4b71      	ldr	r3, [pc, #452]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	4a70      	ldr	r2, [pc, #448]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	6313      	str	r3, [r2, #48]	; 0x30
 800612a:	4b6e      	ldr	r3, [pc, #440]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006136:	4b6b      	ldr	r3, [pc, #428]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800613c:	f043 0320 	orr.w	r3, r3, #32
 8006140:	6313      	str	r3, [r2, #48]	; 0x30
 8006142:	4b68      	ldr	r3, [pc, #416]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800614e:	4b65      	ldr	r3, [pc, #404]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	4a64      	ldr	r2, [pc, #400]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	6313      	str	r3, [r2, #48]	; 0x30
 800615a:	4b62      	ldr	r3, [pc, #392]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006166:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	4a5e      	ldr	r2, [pc, #376]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6313      	str	r3, [r2, #48]	; 0x30
 8006172:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800617e:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4a58      	ldr	r2, [pc, #352]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	6313      	str	r3, [r2, #48]	; 0x30
 800618a:	4b56      	ldr	r3, [pc, #344]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006196:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a52      	ldr	r2, [pc, #328]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 800619c:	f043 0308 	orr.w	r3, r3, #8
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30
 80061a2:	4b50      	ldr	r3, [pc, #320]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80061ae:	4b4d      	ldr	r3, [pc, #308]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	4a4c      	ldr	r2, [pc, #304]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 80061b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ba:	4b4a      	ldr	r3, [pc, #296]	; (80062e4 <MX_GPIO_Init+0x1dc>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80061c6:	2200      	movs	r2, #0
 80061c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80061cc:	4846      	ldr	r0, [pc, #280]	; (80062e8 <MX_GPIO_Init+0x1e0>)
 80061ce:	f7fb f96b 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80061d2:	2200      	movs	r2, #0
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	4845      	ldr	r0, [pc, #276]	; (80062ec <MX_GPIO_Init+0x1e4>)
 80061d8:	f7fb f966 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80061dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <MX_GPIO_Init+0x1e8>)
 80061e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80061ea:	f107 031c 	add.w	r3, r7, #28
 80061ee:	4619      	mov	r1, r3
 80061f0:	4840      	ldr	r0, [pc, #256]	; (80062f4 <MX_GPIO_Init+0x1ec>)
 80061f2:	f7fa ffaf 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061f6:	2332      	movs	r3, #50	; 0x32
 80061f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006202:	2303      	movs	r3, #3
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006206:	230b      	movs	r3, #11
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800620a:	f107 031c 	add.w	r3, r7, #28
 800620e:	4619      	mov	r1, r3
 8006210:	4838      	ldr	r0, [pc, #224]	; (80062f4 <MX_GPIO_Init+0x1ec>)
 8006212:	f7fa ff9f 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006216:	2386      	movs	r3, #134	; 0x86
 8006218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621a:	2302      	movs	r3, #2
 800621c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006222:	2303      	movs	r3, #3
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006226:	230b      	movs	r3, #11
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800622a:	f107 031c 	add.w	r3, r7, #28
 800622e:	4619      	mov	r1, r3
 8006230:	4831      	ldr	r0, [pc, #196]	; (80062f8 <MX_GPIO_Init+0x1f0>)
 8006232:	f7fa ff8f 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8006236:	f244 0381 	movw	r3, #16513	; 0x4081
 800623a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800623c:	2301      	movs	r3, #1
 800623e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006244:	2300      	movs	r3, #0
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006248:	f107 031c 	add.w	r3, r7, #28
 800624c:	4619      	mov	r1, r3
 800624e:	4826      	ldr	r0, [pc, #152]	; (80062e8 <MX_GPIO_Init+0x1e0>)
 8006250:	f7fa ff80 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800625a:	2302      	movs	r3, #2
 800625c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006262:	2303      	movs	r3, #3
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006266:	230b      	movs	r3, #11
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800626a:	f107 031c 	add.w	r3, r7, #28
 800626e:	4619      	mov	r1, r3
 8006270:	481d      	ldr	r0, [pc, #116]	; (80062e8 <MX_GPIO_Init+0x1e0>)
 8006272:	f7fa ff6f 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800627a:	2301      	movs	r3, #1
 800627c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006282:	2300      	movs	r3, #0
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	4619      	mov	r1, r3
 800628c:	4817      	ldr	r0, [pc, #92]	; (80062ec <MX_GPIO_Init+0x1e4>)
 800628e:	f7fa ff61 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800629e:	f107 031c 	add.w	r3, r7, #28
 80062a2:	4619      	mov	r1, r3
 80062a4:	4811      	ldr	r0, [pc, #68]	; (80062ec <MX_GPIO_Init+0x1e4>)
 80062a6:	f7fa ff55 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80062aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80062ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b0:	2302      	movs	r3, #2
 80062b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b8:	2303      	movs	r3, #3
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062bc:	230b      	movs	r3, #11
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062c0:	f107 031c 	add.w	r3, r7, #28
 80062c4:	4619      	mov	r1, r3
 80062c6:	4809      	ldr	r0, [pc, #36]	; (80062ec <MX_GPIO_Init+0x1e4>)
 80062c8:	f7fa ff44 	bl	8001154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	2028      	movs	r0, #40	; 0x28
 80062d2:	f7fa fee6 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80062d6:	2028      	movs	r0, #40	; 0x28
 80062d8:	f7fa feff 	bl	80010da <HAL_NVIC_EnableIRQ>

}
 80062dc:	bf00      	nop
 80062de:	3730      	adds	r7, #48	; 0x30
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020400 	.word	0x40020400
 80062ec:	40021800 	.word	0x40021800
 80062f0:	10110000 	.word	0x10110000
 80062f4:	40020800 	.word	0x40020800
 80062f8:	40020000 	.word	0x40020000

080062fc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af02      	add	r7, sp, #8
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	f023 030f 	bic.w	r3, r3, #15
 800630c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	f043 030c 	orr.w	r3, r3, #12
 800631a:	b2db      	uxtb	r3, r3
 800631c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	b2db      	uxtb	r3, r3
 8006326:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	f043 030c 	orr.w	r3, r3, #12
 800632e:	b2db      	uxtb	r3, r3
 8006330:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	f043 0308 	orr.w	r3, r3, #8
 8006338:	b2db      	uxtb	r3, r3
 800633a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800633c:	f107 0208 	add.w	r2, r7, #8
 8006340:	2364      	movs	r3, #100	; 0x64
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	2304      	movs	r3, #4
 8006346:	217e      	movs	r1, #126	; 0x7e
 8006348:	4803      	ldr	r0, [pc, #12]	; (8006358 <lcd_send_cmd+0x5c>)
 800634a:	f7fb f97b 	bl	8001644 <HAL_I2C_Master_Transmit>
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000254 	.word	0x20000254

0800635c <lcd_send_data>:

void lcd_send_data (char data)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af02      	add	r7, sp, #8
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	f023 030f 	bic.w	r3, r3, #15
 800636c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	f043 030d 	orr.w	r3, r3, #13
 800637a:	b2db      	uxtb	r3, r3
 800637c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	f043 0309 	orr.w	r3, r3, #9
 8006384:	b2db      	uxtb	r3, r3
 8006386:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	f043 030d 	orr.w	r3, r3, #13
 800638e:	b2db      	uxtb	r3, r3
 8006390:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	f043 0309 	orr.w	r3, r3, #9
 8006398:	b2db      	uxtb	r3, r3
 800639a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800639c:	f107 0208 	add.w	r2, r7, #8
 80063a0:	2364      	movs	r3, #100	; 0x64
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2304      	movs	r3, #4
 80063a6:	217e      	movs	r1, #126	; 0x7e
 80063a8:	4803      	ldr	r0, [pc, #12]	; (80063b8 <lcd_send_data+0x5c>)
 80063aa:	f7fb f94b 	bl	8001644 <HAL_I2C_Master_Transmit>
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000254 	.word	0x20000254

080063bc <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
    switch (row)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <lcd_put_cur+0x16>
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d005      	beq.n	80063dc <lcd_put_cur+0x20>
 80063d0:	e009      	b.n	80063e6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	603b      	str	r3, [r7, #0]
            break;
 80063da:	e004      	b.n	80063e6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063e2:	603b      	str	r3, [r7, #0]
            break;
 80063e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff ff86 	bl	80062fc <lcd_send_cmd>
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <lcd_init>:


void lcd_init (void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80063fc:	2032      	movs	r0, #50	; 0x32
 80063fe:	f7fa fd53 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8006402:	2030      	movs	r0, #48	; 0x30
 8006404:	f7ff ff7a 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8006408:	2005      	movs	r0, #5
 800640a:	f7fa fd4d 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800640e:	2030      	movs	r0, #48	; 0x30
 8006410:	f7ff ff74 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8006414:	2001      	movs	r0, #1
 8006416:	f7fa fd47 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800641a:	2030      	movs	r0, #48	; 0x30
 800641c:	f7ff ff6e 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(10);
 8006420:	200a      	movs	r0, #10
 8006422:	f7fa fd41 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8006426:	2020      	movs	r0, #32
 8006428:	f7ff ff68 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(10);
 800642c:	200a      	movs	r0, #10
 800642e:	f7fa fd3b 	bl	8000ea8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8006432:	2028      	movs	r0, #40	; 0x28
 8006434:	f7ff ff62 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(1);
 8006438:	2001      	movs	r0, #1
 800643a:	f7fa fd35 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800643e:	2008      	movs	r0, #8
 8006440:	f7ff ff5c 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(1);
 8006444:	2001      	movs	r0, #1
 8006446:	f7fa fd2f 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800644a:	2001      	movs	r0, #1
 800644c:	f7ff ff56 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(1);
 8006450:	2001      	movs	r0, #1
 8006452:	f7fa fd29 	bl	8000ea8 <HAL_Delay>
	HAL_Delay(1);
 8006456:	2001      	movs	r0, #1
 8006458:	f7fa fd26 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800645c:	2006      	movs	r0, #6
 800645e:	f7ff ff4d 	bl	80062fc <lcd_send_cmd>
	HAL_Delay(1);
 8006462:	2001      	movs	r0, #1
 8006464:	f7fa fd20 	bl	8000ea8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8006468:	200c      	movs	r0, #12
 800646a:	f7ff ff47 	bl	80062fc <lcd_send_cmd>
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}

08006472 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800647a:	e006      	b.n	800648a <lcd_send_string+0x18>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff69 	bl	800635c <lcd_send_data>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f4      	bne.n	800647c <lcd_send_string+0xa>
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80064a0:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <MX_I2C1_Init+0x74>)
 80064a2:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <MX_I2C1_Init+0x78>)
 80064a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <MX_I2C1_Init+0x74>)
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <MX_I2C1_Init+0x7c>)
 80064aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80064ac:	4b18      	ldr	r3, [pc, #96]	; (8006510 <MX_I2C1_Init+0x74>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064b2:	4b17      	ldr	r3, [pc, #92]	; (8006510 <MX_I2C1_Init+0x74>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064b8:	4b15      	ldr	r3, [pc, #84]	; (8006510 <MX_I2C1_Init+0x74>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80064be:	4b14      	ldr	r3, [pc, #80]	; (8006510 <MX_I2C1_Init+0x74>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <MX_I2C1_Init+0x74>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <MX_I2C1_Init+0x74>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <MX_I2C1_Init+0x74>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80064d6:	480e      	ldr	r0, [pc, #56]	; (8006510 <MX_I2C1_Init+0x74>)
 80064d8:	f7fb f824 	bl	8001524 <HAL_I2C_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80064e2:	f000 faf1 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064e6:	2100      	movs	r1, #0
 80064e8:	4809      	ldr	r0, [pc, #36]	; (8006510 <MX_I2C1_Init+0x74>)
 80064ea:	f7fc f96a 	bl	80027c2 <HAL_I2CEx_ConfigAnalogFilter>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80064f4:	f000 fae8 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80064f8:	2100      	movs	r1, #0
 80064fa:	4805      	ldr	r0, [pc, #20]	; (8006510 <MX_I2C1_Init+0x74>)
 80064fc:	f7fc f9ac 	bl	8002858 <HAL_I2CEx_ConfigDigitalFilter>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006506:	f000 fadf 	bl	8006ac8 <Error_Handler>
  }

}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000208 	.word	0x20000208
 8006514:	40005400 	.word	0x40005400
 8006518:	00808cd2 	.word	0x00808cd2

0800651c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8006520:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <MX_I2C2_Init+0x74>)
 8006522:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <MX_I2C2_Init+0x78>)
 8006524:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <MX_I2C2_Init+0x74>)
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <MX_I2C2_Init+0x7c>)
 800652a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800652c:	4b18      	ldr	r3, [pc, #96]	; (8006590 <MX_I2C2_Init+0x74>)
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <MX_I2C2_Init+0x74>)
 8006534:	2201      	movs	r2, #1
 8006536:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006538:	4b15      	ldr	r3, [pc, #84]	; (8006590 <MX_I2C2_Init+0x74>)
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <MX_I2C2_Init+0x74>)
 8006540:	2200      	movs	r2, #0
 8006542:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <MX_I2C2_Init+0x74>)
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <MX_I2C2_Init+0x74>)
 800654c:	2200      	movs	r2, #0
 800654e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <MX_I2C2_Init+0x74>)
 8006552:	2200      	movs	r2, #0
 8006554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006556:	480e      	ldr	r0, [pc, #56]	; (8006590 <MX_I2C2_Init+0x74>)
 8006558:	f7fa ffe4 	bl	8001524 <HAL_I2C_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006562:	f000 fab1 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006566:	2100      	movs	r1, #0
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <MX_I2C2_Init+0x74>)
 800656a:	f7fc f92a 	bl	80027c2 <HAL_I2CEx_ConfigAnalogFilter>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006574:	f000 faa8 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006578:	2100      	movs	r1, #0
 800657a:	4805      	ldr	r0, [pc, #20]	; (8006590 <MX_I2C2_Init+0x74>)
 800657c:	f7fc f96c 	bl	8002858 <HAL_I2CEx_ConfigDigitalFilter>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006586:	f000 fa9f 	bl	8006ac8 <Error_Handler>
  }

}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000254 	.word	0x20000254
 8006594:	40005800 	.word	0x40005800
 8006598:	00808cd2 	.word	0x00808cd2

0800659c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	; 0x30
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a4:	f107 031c 	add.w	r3, r7, #28
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	609a      	str	r2, [r3, #8]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3e      	ldr	r2, [pc, #248]	; (80066b4 <HAL_I2C_MspInit+0x118>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d139      	bne.n	8006632 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065be:	4b3e      	ldr	r3, [pc, #248]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	4a3d      	ldr	r2, [pc, #244]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	6313      	str	r3, [r2, #48]	; 0x30
 80065ca:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80065d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065dc:	2312      	movs	r3, #18
 80065de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065e0:	2301      	movs	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065e4:	2303      	movs	r3, #3
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065e8:	2304      	movs	r3, #4
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ec:	f107 031c 	add.w	r3, r7, #28
 80065f0:	4619      	mov	r1, r3
 80065f2:	4832      	ldr	r0, [pc, #200]	; (80066bc <HAL_I2C_MspInit+0x120>)
 80065f4:	f7fa fdae 	bl	8001154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	4a2e      	ldr	r2, [pc, #184]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 80065fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006602:	6413      	str	r3, [r2, #64]	; 0x40
 8006604:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006610:	2200      	movs	r2, #0
 8006612:	2100      	movs	r1, #0
 8006614:	201f      	movs	r0, #31
 8006616:	f7fa fd44 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800661a:	201f      	movs	r0, #31
 800661c:	f7fa fd5d 	bl	80010da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	2020      	movs	r0, #32
 8006626:	f7fa fd3c 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800662a:	2020      	movs	r0, #32
 800662c:	f7fa fd55 	bl	80010da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006630:	e03c      	b.n	80066ac <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C2)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <HAL_I2C_MspInit+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d137      	bne.n	80066ac <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800663c:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 8006642:	f043 0320 	orr.w	r3, r3, #32
 8006646:	6313      	str	r3, [r2, #48]	; 0x30
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006654:	2303      	movs	r3, #3
 8006656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006658:	2312      	movs	r3, #18
 800665a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800665c:	2301      	movs	r3, #1
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006660:	2303      	movs	r3, #3
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006664:	2304      	movs	r3, #4
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006668:	f107 031c 	add.w	r3, r7, #28
 800666c:	4619      	mov	r1, r3
 800666e:	4815      	ldr	r0, [pc, #84]	; (80066c4 <HAL_I2C_MspInit+0x128>)
 8006670:	f7fa fd70 	bl	8001154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	4a0f      	ldr	r2, [pc, #60]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 800667a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800667e:	6413      	str	r3, [r2, #64]	; 0x40
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <HAL_I2C_MspInit+0x11c>)
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800668c:	2200      	movs	r2, #0
 800668e:	2100      	movs	r1, #0
 8006690:	2021      	movs	r0, #33	; 0x21
 8006692:	f7fa fd06 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006696:	2021      	movs	r0, #33	; 0x21
 8006698:	f7fa fd1f 	bl	80010da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800669c:	2200      	movs	r2, #0
 800669e:	2100      	movs	r1, #0
 80066a0:	2022      	movs	r0, #34	; 0x22
 80066a2:	f7fa fcfe 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80066a6:	2022      	movs	r0, #34	; 0x22
 80066a8:	f7fa fd17 	bl	80010da <HAL_NVIC_EnableIRQ>
}
 80066ac:	bf00      	nop
 80066ae:	3730      	adds	r7, #48	; 0x30
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40005400 	.word	0x40005400
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40020400 	.word	0x40020400
 80066c0:	40005800 	.word	0x40005800
 80066c4:	40021400 	.word	0x40021400

080066c8 <transmisja_error>:

/* Obsługa transmisji komunikatu o błędzie
 * W przypadku niepoprawnego znaku w wartości zadanej
 * wyświetlany jest odpowiedni komunikat  */
void transmisja_error()
{
 80066c8:	b5b0      	push	{r4, r5, r7, lr}
 80066ca:	af00      	add	r7, sp, #0
	transmit_size_error = sprintf(bufor_error, "Blad wartosci zadanej!!\n\r");
 80066cc:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <transmisja_error+0x3c>)
 80066ce:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <transmisja_error+0x40>)
 80066d0:	4615      	mov	r5, r2
 80066d2:	461c      	mov	r4, r3
 80066d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d6:	6028      	str	r0, [r5, #0]
 80066d8:	6069      	str	r1, [r5, #4]
 80066da:	60aa      	str	r2, [r5, #8]
 80066dc:	60eb      	str	r3, [r5, #12]
 80066de:	cc03      	ldmia	r4!, {r0, r1}
 80066e0:	6128      	str	r0, [r5, #16]
 80066e2:	6169      	str	r1, [r5, #20]
 80066e4:	8823      	ldrh	r3, [r4, #0]
 80066e6:	832b      	strh	r3, [r5, #24]
 80066e8:	2219      	movs	r2, #25
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <transmisja_error+0x44>)
 80066ec:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)bufor_error, transmit_size_error, 100);
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <transmisja_error+0x44>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	2364      	movs	r3, #100	; 0x64
 80066f6:	4903      	ldr	r1, [pc, #12]	; (8006704 <transmisja_error+0x3c>)
 80066f8:	4805      	ldr	r0, [pc, #20]	; (8006710 <transmisja_error+0x48>)
 80066fa:	f7fe fae5 	bl	8004cc8 <HAL_UART_Transmit>
}
 80066fe:	bf00      	nop
 8006700:	bdb0      	pop	{r4, r5, r7, pc}
 8006702:	bf00      	nop
 8006704:	200002cc 	.word	0x200002cc
 8006708:	08007ccc 	.word	0x08007ccc
 800670c:	200002a8 	.word	0x200002a8
 8006710:	200004e8 	.word	0x200004e8

08006714 <HAL_UART_RxCpltCallback>:
 * Funkcja odczytuje wartość zadaną wpisując do bufora(tablica znaków)
 * oraz konwertuje na wartość całkowitoliczbową(int)
 * Dodatkowo zaimplementowana została odporność na błędy
 * w postaci niepoprawnego znaku w wartości zadanej  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	port_status = HAL_UART_Receive_IT(&huart3, (uint8_t*)lx_zadana_char, receive_size);
 800671c:	2304      	movs	r3, #4
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	491d      	ldr	r1, [pc, #116]	; (8006798 <HAL_UART_RxCpltCallback+0x84>)
 8006724:	481d      	ldr	r0, [pc, #116]	; (800679c <HAL_UART_RxCpltCallback+0x88>)
 8006726:	f7fe fb61 	bl	8004dec <HAL_UART_Receive_IT>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <HAL_UART_RxCpltCallback+0x8c>)
 8006730:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<4; i++)
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e016      	b.n	8006766 <HAL_UART_RxCpltCallback+0x52>
	{
		if(lx_zadana_char[i] > 47 && lx_zadana_char[i] < 58)
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <HAL_UART_RxCpltCallback+0x84>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b2f      	cmp	r3, #47	; 0x2f
 8006742:	d90c      	bls.n	800675e <HAL_UART_RxCpltCallback+0x4a>
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <HAL_UART_RxCpltCallback+0x84>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b39      	cmp	r3, #57	; 0x39
 800674e:	d806      	bhi.n	800675e <HAL_UART_RxCpltCallback+0x4a>
		{
			kontrola_znaku = 1;
 8006750:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <HAL_UART_RxCpltCallback+0x90>)
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
	for (int i=0; i<4; i++)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e003      	b.n	8006766 <HAL_UART_RxCpltCallback+0x52>
		}
		else
		{
			kontrola_znaku = 0;
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_UART_RxCpltCallback+0x90>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
			break;
 8006764:	e002      	b.n	800676c <HAL_UART_RxCpltCallback+0x58>
	for (int i=0; i<4; i++)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b03      	cmp	r3, #3
 800676a:	dde5      	ble.n	8006738 <HAL_UART_RxCpltCallback+0x24>
		}
	}
	if(kontrola_znaku)
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <HAL_UART_RxCpltCallback+0x90>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d006      	beq.n	8006782 <HAL_UART_RxCpltCallback+0x6e>
	{
		lx_zadana_int = atoi(lx_zadana_char);
 8006774:	4808      	ldr	r0, [pc, #32]	; (8006798 <HAL_UART_RxCpltCallback+0x84>)
 8006776:	f000 fd52 	bl	800721e <atoi>
 800677a:	4602      	mov	r2, r0
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <HAL_UART_RxCpltCallback+0x94>)
 800677e:	601a      	str	r2, [r3, #0]
	else
	{
		transmisja_error();
		memset(lx_zadana_char, 0, sizeof(lx_zadana_char));
	}
}
 8006780:	e006      	b.n	8006790 <HAL_UART_RxCpltCallback+0x7c>
		transmisja_error();
 8006782:	f7ff ffa1 	bl	80066c8 <transmisja_error>
		memset(lx_zadana_char, 0, sizeof(lx_zadana_char));
 8006786:	2204      	movs	r2, #4
 8006788:	2100      	movs	r1, #0
 800678a:	4803      	ldr	r0, [pc, #12]	; (8006798 <HAL_UART_RxCpltCallback+0x84>)
 800678c:	f000 fd90 	bl	80072b0 <memset>
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200002a0 	.word	0x200002a0
 800679c:	200004e8 	.word	0x200004e8
 80067a0:	200002a4 	.word	0x200002a4
 80067a4:	200002b0 	.word	0x200002b0
 80067a8:	20000464 	.word	0x20000464

080067ac <transmisja_danych>:

/* Obsługa transmisji danych przez interfejs UART
 * Funkcja zapisuje zadany tekst do bufora
 * oraz wysyła wiadomość przez interfejs UART  */
void transmisja_danych()
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
	transmit_size_lx = sprintf(bufor_lx, "Natezenie swiatla [lux]: %d\n\r", BH1750_int);
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <transmisja_danych+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4909      	ldr	r1, [pc, #36]	; (80067dc <transmisja_danych+0x30>)
 80067b8:	4809      	ldr	r0, [pc, #36]	; (80067e0 <transmisja_danych+0x34>)
 80067ba:	f000 fd81 	bl	80072c0 <siprintf>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <transmisja_danych+0x38>)
 80067c2:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)bufor_lx, transmit_size_lx, 100);
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <transmisja_danych+0x38>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	2364      	movs	r3, #100	; 0x64
 80067cc:	4904      	ldr	r1, [pc, #16]	; (80067e0 <transmisja_danych+0x34>)
 80067ce:	4806      	ldr	r0, [pc, #24]	; (80067e8 <transmisja_danych+0x3c>)
 80067d0:	f7fe fa7a 	bl	8004cc8 <HAL_UART_Transmit>
}
 80067d4:	bf00      	nop
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200002ac 	.word	0x200002ac
 80067dc:	08007ce8 	.word	0x08007ce8
 80067e0:	20000394 	.word	0x20000394
 80067e4:	200002c8 	.word	0x200002c8
 80067e8:	200004e8 	.word	0x200004e8

080067ec <regulacja>:

/* Regulacja histerezowa
 * Funkcja porównuje wartość zadaną oraz odczytaną z czujnika
 * oraz reguluje wypełnienie PWM, w zależności od uchybu  */
void regulacja()
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	if(uchyb > 70)
 80067f0:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <regulacja+0xc0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b46      	cmp	r3, #70	; 0x46
 80067f6:	dd27      	ble.n	8006848 <regulacja+0x5c>
	{
		if (BH1750_int <= lx_zadana_int && duty <= 1000)
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <regulacja+0xc4>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <regulacja+0xc8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	dc0e      	bgt.n	8006822 <regulacja+0x36>
 8006804:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <regulacja+0xcc>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680c:	dc09      	bgt.n	8006822 <regulacja+0x36>
		{
			duty +=10;
 800680e:	4b2a      	ldr	r3, [pc, #168]	; (80068b8 <regulacja+0xcc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330a      	adds	r3, #10
 8006814:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <regulacja+0xcc>)
 8006816:	6013      	str	r3, [r2, #0]
			TIM3->CCR3=duty;
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <regulacja+0xcc>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <regulacja+0xd0>)
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006820:	e012      	b.n	8006848 <regulacja+0x5c>
		}
		else if (BH1750_int > lx_zadana_int && duty > 0)
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <regulacja+0xc4>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <regulacja+0xc8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	dd0c      	ble.n	8006848 <regulacja+0x5c>
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <regulacja+0xcc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd08      	ble.n	8006848 <regulacja+0x5c>
		{
			duty -=10;
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <regulacja+0xcc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b0a      	subs	r3, #10
 800683c:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <regulacja+0xcc>)
 800683e:	6013      	str	r3, [r2, #0]
			TIM3->CCR3=duty;
 8006840:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <regulacja+0xcc>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <regulacja+0xd0>)
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if(uchyb <= 70)
 8006848:	4b18      	ldr	r3, [pc, #96]	; (80068ac <regulacja+0xc0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b46      	cmp	r3, #70	; 0x46
 800684e:	dc27      	bgt.n	80068a0 <regulacja+0xb4>
	{
		if (BH1750_int <= lx_zadana_int && duty <= 1000)
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <regulacja+0xc4>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <regulacja+0xc8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	dc0e      	bgt.n	800687a <regulacja+0x8e>
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <regulacja+0xcc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006864:	dc09      	bgt.n	800687a <regulacja+0x8e>
		{
			 duty +=1;
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <regulacja+0xcc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	4a12      	ldr	r2, [pc, #72]	; (80068b8 <regulacja+0xcc>)
 800686e:	6013      	str	r3, [r2, #0]
			 TIM3->CCR3=duty;
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <regulacja+0xcc>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b11      	ldr	r3, [pc, #68]	; (80068bc <regulacja+0xd0>)
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c
		{
			 duty -=1;
			 TIM3->CCR3=duty;
		}
	}
}
 8006878:	e012      	b.n	80068a0 <regulacja+0xb4>
		else if (BH1750_int > lx_zadana_int && duty > 0)
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <regulacja+0xc4>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <regulacja+0xc8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	dd0c      	ble.n	80068a0 <regulacja+0xb4>
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <regulacja+0xcc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dd08      	ble.n	80068a0 <regulacja+0xb4>
			 duty -=1;
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <regulacja+0xcc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <regulacja+0xcc>)
 8006896:	6013      	str	r3, [r2, #0]
			 TIM3->CCR3=duty;
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <regulacja+0xcc>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <regulacja+0xd0>)
 800689e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000460 	.word	0x20000460
 80068b0:	200002ac 	.word	0x200002ac
 80068b4:	20000464 	.word	0x20000464
 80068b8:	2000045c 	.word	0x2000045c
 80068bc:	40000400 	.word	0x40000400

080068c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068c4:	f7fa fa92 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068c8:	f000 f86a 	bl	80069a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068cc:	f7ff fc1c 	bl	8006108 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80068d0:	f000 fb76 	bl	8006fc0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80068d4:	f000 fbf0 	bl	80070b8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80068d8:	f7ff fde0 	bl	800649c <MX_I2C1_Init>
  MX_TIM2_Init();
 80068dc:	f000 f9fe 	bl	8006cdc <MX_TIM2_Init>
  MX_TIM3_Init();
 80068e0:	f000 fa4a 	bl	8006d78 <MX_TIM3_Init>
  MX_I2C2_Init();
 80068e4:	f7ff fe1a 	bl	800651c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init();                            //inicjalizacja czujnika
 80068e8:	f7ff fbc2 	bl	8006070 <BH1750_Init>
  lcd_init();								//inicjalizacja wyświetlacza
 80068ec:	f7ff fd84 	bl	80063f8 <lcd_init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //wystartowanie PWM
 80068f0:	2108      	movs	r1, #8
 80068f2:	4821      	ldr	r0, [pc, #132]	; (8006978 <main+0xb8>)
 80068f4:	f7fd f9fa 	bl	8003cec <HAL_TIM_PWM_Start>
  TIM3->CCR3 = 0;                           //ustalenie startowej wartości wypełnienia
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <main+0xbc>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c
  lcd_put_cur(0, 5);                        //umieszczenie kursora wyświetlacza w zadanej pozycji
 80068fe:	2105      	movs	r1, #5
 8006900:	2000      	movs	r0, #0
 8006902:	f7ff fd5b 	bl	80063bc <lcd_put_cur>
  lcd_send_string("lx");                    //wysłanie symbolu jednostki na wyświetlacz
 8006906:	481e      	ldr	r0, [pc, #120]	; (8006980 <main+0xc0>)
 8006908:	f7ff fdb3 	bl	8006472 <lcd_send_string>

  //Jednorazowe wywołanie odbioru danych przez UART
  port_status = HAL_UART_Receive_IT(&huart3, (uint8_t*)lx_zadana_char, receive_size);
 800690c:	2304      	movs	r3, #4
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	491c      	ldr	r1, [pc, #112]	; (8006984 <main+0xc4>)
 8006914:	481c      	ldr	r0, [pc, #112]	; (8006988 <main+0xc8>)
 8006916:	f7fe fa69 	bl	8004dec <HAL_UART_Receive_IT>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <main+0xcc>)
 8006920:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BH1750_int=(int)BH1750_Receive();            //Odczyt wartości natężenia światła z czujnika
 8006922:	f7ff fbc5 	bl	80060b0 <BH1750_Receive>
 8006926:	eef0 7a40 	vmov.f32	s15, s0
 800692a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800692e:	ee17 2a90 	vmov	r2, s15
 8006932:	4b17      	ldr	r3, [pc, #92]	; (8006990 <main+0xd0>)
 8006934:	601a      	str	r2, [r3, #0]
	  transmisja_danych();                         //Transmisja komunikatu w terminalu
 8006936:	f7ff ff39 	bl	80067ac <transmisja_danych>
	  itoa(BH1750_int, lx_lcd, 10);                //Konwersja odczytanej wartości int do string
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <main+0xd0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	220a      	movs	r2, #10
 8006940:	4914      	ldr	r1, [pc, #80]	; (8006994 <main+0xd4>)
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fcb2 	bl	80072ac <itoa>
	  lcd_put_cur(0, 0);                           //Umieszczenie kursora na wyświetlaczu w zadanym punkcie
 8006948:	2100      	movs	r1, #0
 800694a:	2000      	movs	r0, #0
 800694c:	f7ff fd36 	bl	80063bc <lcd_put_cur>
	  lcd_send_string(lx_lcd);                     //Wysyłanie wartości natężenia na wyświetlacz, jako ciąg znaków
 8006950:	4810      	ldr	r0, [pc, #64]	; (8006994 <main+0xd4>)
 8006952:	f7ff fd8e 	bl	8006472 <lcd_send_string>
	  HAL_Delay(500);                              //Odczekanie 0.5s(regulowana częstotliwość wysyłania)
 8006956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800695a:	f7fa faa5 	bl	8000ea8 <HAL_Delay>
	  uchyb = abs(lx_zadana_int - BH1750_int);     //Obliczenie uchybu
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <main+0xd8>)
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <main+0xd0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	bfb8      	it	lt
 800696c:	425b      	neglt	r3, r3
 800696e:	4a0b      	ldr	r2, [pc, #44]	; (800699c <main+0xdc>)
 8006970:	6013      	str	r3, [r2, #0]
	  regulacja();                                 //Regulacja natężenia światła
 8006972:	f7ff ff3b 	bl	80067ec <regulacja>
	  BH1750_int=(int)BH1750_Receive();            //Odczyt wartości natężenia światła z czujnika
 8006976:	e7d4      	b.n	8006922 <main+0x62>
 8006978:	20000468 	.word	0x20000468
 800697c:	40000400 	.word	0x40000400
 8006980:	08007d08 	.word	0x08007d08
 8006984:	200002a0 	.word	0x200002a0
 8006988:	200004e8 	.word	0x200004e8
 800698c:	200002a4 	.word	0x200002a4
 8006990:	200002ac 	.word	0x200002ac
 8006994:	200002b4 	.word	0x200002b4
 8006998:	20000464 	.word	0x20000464
 800699c:	20000460 	.word	0x20000460

080069a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b0b4      	sub	sp, #208	; 0xd0
 80069a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069aa:	2230      	movs	r2, #48	; 0x30
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fc7e 	bl	80072b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069c4:	f107 0308 	add.w	r3, r7, #8
 80069c8:	2284      	movs	r2, #132	; 0x84
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fc6f 	bl	80072b0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80069d2:	f7fc f8c9 	bl	8002b68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <SystemClock_Config+0x11c>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	4a38      	ldr	r2, [pc, #224]	; (8006abc <SystemClock_Config+0x11c>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e0:	6413      	str	r3, [r2, #64]	; 0x40
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <SystemClock_Config+0x11c>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80069ee:	4b34      	ldr	r3, [pc, #208]	; (8006ac0 <SystemClock_Config+0x120>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80069f6:	4a32      	ldr	r2, [pc, #200]	; (8006ac0 <SystemClock_Config+0x120>)
 80069f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	4b30      	ldr	r3, [pc, #192]	; (8006ac0 <SystemClock_Config+0x120>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006a10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006a26:	2304      	movs	r3, #4
 8006a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006a2c:	2348      	movs	r3, #72	; 0x48
 8006a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a32:	2302      	movs	r3, #2
 8006a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fc f8a0 	bl	8002b88 <HAL_RCC_OscConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006a4e:	f000 f83b 	bl	8006ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a52:	230f      	movs	r3, #15
 8006a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006a72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a76:	2102      	movs	r1, #2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fc faf5 	bl	8003068 <HAL_RCC_ClockConfig>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8006a84:	f000 f820 	bl	8006ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8006a88:	4b0e      	ldr	r3, [pc, #56]	; (8006ac4 <SystemClock_Config+0x124>)
 8006a8a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006a90:	2300      	movs	r3, #0
 8006a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006a94:	2300      	movs	r3, #0
 8006a96:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fc fcd4 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8006aae:	f000 f80b 	bl	8006ac8 <Error_Handler>
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	37d0      	adds	r7, #208	; 0xd0
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	40007000 	.word	0x40007000
 8006ac4:	0020c100 	.word	0x0020c100

08006ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <HAL_MspInit+0x44>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <HAL_MspInit+0x44>)
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <HAL_MspInit+0x44>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <HAL_MspInit+0x44>)
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <HAL_MspInit+0x44>)
 8006afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b00:	6453      	str	r3, [r2, #68]	; 0x44
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_MspInit+0x44>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800

08006b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b32:	e7fe      	b.n	8006b32 <HardFault_Handler+0x4>

08006b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b38:	e7fe      	b.n	8006b38 <MemManage_Handler+0x4>

08006b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b3e:	e7fe      	b.n	8006b3e <BusFault_Handler+0x4>

08006b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b44:	e7fe      	b.n	8006b44 <UsageFault_Handler+0x4>

08006b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b4a:	bf00      	nop
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b62:	b480      	push	{r7}
 8006b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b66:	bf00      	nop
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b74:	f7fa f978 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b78:	bf00      	nop
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b80:	4802      	ldr	r0, [pc, #8]	; (8006b8c <TIM2_IRQHandler+0x10>)
 8006b82:	f7fd f8f7 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200004a8 	.word	0x200004a8

08006b90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b94:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <TIM3_IRQHandler+0x10>)
 8006b96:	f7fd f8ed 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000468 	.word	0x20000468

08006ba4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006ba8:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <I2C1_EV_IRQHandler+0x10>)
 8006baa:	f7fa ff35 	bl	8001a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000208 	.word	0x20000208

08006bb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006bbc:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <I2C1_ER_IRQHandler+0x10>)
 8006bbe:	f7fa ff45 	bl	8001a4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000208 	.word	0x20000208

08006bcc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006bd0:	4802      	ldr	r0, [pc, #8]	; (8006bdc <I2C2_EV_IRQHandler+0x10>)
 8006bd2:	f7fa ff21 	bl	8001a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000254 	.word	0x20000254

08006be0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006be4:	4802      	ldr	r0, [pc, #8]	; (8006bf0 <I2C2_ER_IRQHandler+0x10>)
 8006be6:	f7fa ff31 	bl	8001a4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000254 	.word	0x20000254

08006bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006bf8:	4802      	ldr	r0, [pc, #8]	; (8006c04 <USART3_IRQHandler+0x10>)
 8006bfa:	f7fe f999 	bl	8004f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200004e8 	.word	0x200004e8

08006c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006c0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006c10:	f7fa fc64 	bl	80014dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <_sbrk+0x50>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <_sbrk+0x16>
		heap_end = &end;
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <_sbrk+0x50>)
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <_sbrk+0x54>)
 8006c2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <_sbrk+0x50>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <_sbrk+0x50>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	466a      	mov	r2, sp
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d907      	bls.n	8006c52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006c42:	f000 faf1 	bl	8007228 <__errno>
 8006c46:	4602      	mov	r2, r0
 8006c48:	230c      	movs	r3, #12
 8006c4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	e006      	b.n	8006c60 <_sbrk+0x48>
	}

	heap_end += incr;
 8006c52:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <_sbrk+0x50>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4413      	add	r3, r2
 8006c5a:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <_sbrk+0x50>)
 8006c5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200001f8 	.word	0x200001f8
 8006c6c:	20000970 	.word	0x20000970

08006c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c74:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <SystemInit+0x5c>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <SystemInit+0x5c>)
 8006c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006c84:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <SystemInit+0x60>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <SystemInit+0x60>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <SystemInit+0x60>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <SystemInit+0x60>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	490d      	ldr	r1, [pc, #52]	; (8006cd0 <SystemInit+0x60>)
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <SystemInit+0x64>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <SystemInit+0x60>)
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	; (8006cd8 <SystemInit+0x68>)
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <SystemInit+0x60>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <SystemInit+0x60>)
 8006cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <SystemInit+0x60>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cba:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <SystemInit+0x5c>)
 8006cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cc0:	609a      	str	r2, [r3, #8]
#endif
}
 8006cc2:	bf00      	nop
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000ed00 	.word	0xe000ed00
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	fef6ffff 	.word	0xfef6ffff
 8006cd8:	24003010 	.word	0x24003010

08006cdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ce2:	f107 0310 	add.w	r3, r7, #16
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	605a      	str	r2, [r3, #4]
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d04:	f640 620f 	movw	r2, #3599	; 0xe0f
 8006d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8006d10:	4b18      	ldr	r3, [pc, #96]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d12:	f242 720f 	movw	r2, #9999	; 0x270f
 8006d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006d24:	4813      	ldr	r0, [pc, #76]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d26:	f7fc ff81 	bl	8003c2c <HAL_TIM_Base_Init>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006d30:	f7ff feca 	bl	8006ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006d3a:	f107 0310 	add.w	r3, r7, #16
 8006d3e:	4619      	mov	r1, r3
 8006d40:	480c      	ldr	r0, [pc, #48]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d42:	f7fd fa4f 	bl	80041e4 <HAL_TIM_ConfigClockSource>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006d4c:	f7ff febc 	bl	8006ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d50:	2300      	movs	r3, #0
 8006d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006d58:	1d3b      	adds	r3, r7, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4805      	ldr	r0, [pc, #20]	; (8006d74 <MX_TIM2_Init+0x98>)
 8006d5e:	f7fd feeb 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006d68:	f7ff feae 	bl	8006ac8 <Error_Handler>
  }

}
 8006d6c:	bf00      	nop
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200004a8 	.word	0x200004a8

08006d78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08e      	sub	sp, #56	; 0x38
 8006d7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	605a      	str	r2, [r3, #4]
 8006d88:	609a      	str	r2, [r3, #8]
 8006d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d8c:	f107 031c 	add.w	r3, r7, #28
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d98:	463b      	mov	r3, r7
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	605a      	str	r2, [r3, #4]
 8006da0:	609a      	str	r2, [r3, #8]
 8006da2:	60da      	str	r2, [r3, #12]
 8006da4:	611a      	str	r2, [r3, #16]
 8006da6:	615a      	str	r2, [r3, #20]
 8006da8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8006daa:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dac:	4a38      	ldr	r2, [pc, #224]	; (8006e90 <MX_TIM3_Init+0x118>)
 8006dae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8006db0:	4b36      	ldr	r3, [pc, #216]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006db2:	2247      	movs	r2, #71	; 0x47
 8006db4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006db6:	4b35      	ldr	r3, [pc, #212]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8006dbc:	4b33      	ldr	r3, [pc, #204]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006dc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dc4:	4b31      	ldr	r3, [pc, #196]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006dca:	4b30      	ldr	r3, [pc, #192]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006dd0:	482e      	ldr	r0, [pc, #184]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dd2:	f7fc ff2b 	bl	8003c2c <HAL_TIM_Base_Init>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8006ddc:	f7ff fe74 	bl	8006ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dea:	4619      	mov	r1, r3
 8006dec:	4827      	ldr	r0, [pc, #156]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dee:	f7fd f9f9 	bl	80041e4 <HAL_TIM_ConfigClockSource>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8006df8:	f7ff fe66 	bl	8006ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006dfc:	4823      	ldr	r0, [pc, #140]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006dfe:	f7fc ff40 	bl	8003c82 <HAL_TIM_PWM_Init>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8006e08:	f7ff fe5e 	bl	8006ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006e14:	f107 031c 	add.w	r3, r7, #28
 8006e18:	4619      	mov	r1, r3
 8006e1a:	481c      	ldr	r0, [pc, #112]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006e1c:	f7fd fe8c 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006e26:	f7ff fe4f 	bl	8006ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e2a:	2360      	movs	r3, #96	; 0x60
 8006e2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8006e2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4619      	mov	r1, r3
 8006e42:	4812      	ldr	r0, [pc, #72]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006e44:	f7fd f8b6 	bl	8003fb4 <HAL_TIM_PWM_ConfigChannel>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8006e4e:	f7ff fe3b 	bl	8006ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e52:	463b      	mov	r3, r7
 8006e54:	2204      	movs	r2, #4
 8006e56:	4619      	mov	r1, r3
 8006e58:	480c      	ldr	r0, [pc, #48]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006e5a:	f7fd f8ab 	bl	8003fb4 <HAL_TIM_PWM_ConfigChannel>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8006e64:	f7ff fe30 	bl	8006ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006e68:	463b      	mov	r3, r7
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4807      	ldr	r0, [pc, #28]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006e70:	f7fd f8a0 	bl	8003fb4 <HAL_TIM_PWM_ConfigChannel>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8006e7a:	f7ff fe25 	bl	8006ac8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006e7e:	4803      	ldr	r0, [pc, #12]	; (8006e8c <MX_TIM3_Init+0x114>)
 8006e80:	f000 f848 	bl	8006f14 <HAL_TIM_MspPostInit>

}
 8006e84:	bf00      	nop
 8006e86:	3738      	adds	r7, #56	; 0x38
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000468 	.word	0x20000468
 8006e90:	40000400 	.word	0x40000400

08006e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d114      	bne.n	8006ed0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ea6:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb2:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	201c      	movs	r0, #28
 8006ec4:	f7fa f8ed 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ec8:	201c      	movs	r0, #28
 8006eca:	f7fa f906 	bl	80010da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006ece:	e018      	b.n	8006f02 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a0e      	ldr	r2, [pc, #56]	; (8006f10 <HAL_TIM_Base_MspInit+0x7c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d113      	bne.n	8006f02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	4a0b      	ldr	r2, [pc, #44]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <HAL_TIM_Base_MspInit+0x78>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	60bb      	str	r3, [r7, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	201d      	movs	r0, #29
 8006ef8:	f7fa f8d3 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006efc:	201d      	movs	r0, #29
 8006efe:	f7fa f8ec 	bl	80010da <HAL_NVIC_EnableIRQ>
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40000400 	.word	0x40000400

08006f14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <HAL_TIM_MspPostInit+0x9c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d138      	bne.n	8006fa8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f36:	4b1f      	ldr	r3, [pc, #124]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6313      	str	r3, [r2, #48]	; 0x30
 8006f42:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f4e:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f54:	f043 0304 	orr.w	r3, r3, #4
 8006f58:	6313      	str	r3, [r2, #48]	; 0x30
 8006f5a:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <HAL_TIM_MspPostInit+0xa0>)
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f72:	2300      	movs	r3, #0
 8006f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f76:	2302      	movs	r3, #2
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f7a:	f107 0314 	add.w	r3, r7, #20
 8006f7e:	4619      	mov	r1, r3
 8006f80:	480d      	ldr	r0, [pc, #52]	; (8006fb8 <HAL_TIM_MspPostInit+0xa4>)
 8006f82:	f7fa f8e7 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006f86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f94:	2300      	movs	r3, #0
 8006f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4806      	ldr	r0, [pc, #24]	; (8006fbc <HAL_TIM_MspPostInit+0xa8>)
 8006fa4:	f7fa f8d6 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006fa8:	bf00      	nop
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40020000 	.word	0x40020000
 8006fbc:	40020800 	.word	0x40020800

08006fc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <MX_USART3_UART_Init+0x5c>)
 8006fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fe6:	220c      	movs	r2, #12
 8006fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <MX_USART3_UART_Init+0x58>)
 8007004:	f7fd fe12 	bl	8004c2c <HAL_UART_Init>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800700e:	f7ff fd5b 	bl	8006ac8 <Error_Handler>
  }

}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200004e8 	.word	0x200004e8
 800701c:	40004800 	.word	0x40004800

08007020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	; 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007028:	f107 0314 	add.w	r3, r7, #20
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1b      	ldr	r2, [pc, #108]	; (80070ac <HAL_UART_MspInit+0x8c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d130      	bne.n	80070a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <HAL_UART_MspInit+0x90>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <HAL_UART_MspInit+0x90>)
 8007048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800704c:	6413      	str	r3, [r2, #64]	; 0x40
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <HAL_UART_MspInit+0x90>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800705a:	4b15      	ldr	r3, [pc, #84]	; (80070b0 <HAL_UART_MspInit+0x90>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	4a14      	ldr	r2, [pc, #80]	; (80070b0 <HAL_UART_MspInit+0x90>)
 8007060:	f043 0308 	orr.w	r3, r3, #8
 8007064:	6313      	str	r3, [r2, #48]	; 0x30
 8007066:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <HAL_UART_MspInit+0x90>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007078:	2302      	movs	r3, #2
 800707a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007080:	2303      	movs	r3, #3
 8007082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007084:	2307      	movs	r3, #7
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	4619      	mov	r1, r3
 800708e:	4809      	ldr	r0, [pc, #36]	; (80070b4 <HAL_UART_MspInit+0x94>)
 8007090:	f7fa f860 	bl	8001154 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	2027      	movs	r0, #39	; 0x27
 800709a:	f7fa f802 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800709e:	2027      	movs	r0, #39	; 0x27
 80070a0:	f7fa f81b 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80070a4:	bf00      	nop
 80070a6:	3728      	adds	r7, #40	; 0x28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40004800 	.word	0x40004800
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40020c00 	.word	0x40020c00

080070b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070c6:	2206      	movs	r2, #6
 80070c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070cc:	2202      	movs	r2, #2
 80070ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80070d0:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070d8:	2202      	movs	r2, #2
 80070da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070de:	2201      	movs	r2, #1
 80070e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80070e2:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80070e8:	4b09      	ldr	r3, [pc, #36]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80070ee:	4b08      	ldr	r3, [pc, #32]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80070fa:	4805      	ldr	r0, [pc, #20]	; (8007110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80070fc:	f7fb fbf8 	bl	80028f0 <HAL_PCD_Init>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8007106:	f7ff fcdf 	bl	8006ac8 <Error_Handler>
  }

}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000568 	.word	0x20000568

08007114 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007134:	d141      	bne.n	80071ba <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	6313      	str	r3, [r2, #48]	; 0x30
 8007142:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800714e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007154:	2302      	movs	r3, #2
 8007156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715c:	2303      	movs	r3, #3
 800715e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007160:	230a      	movs	r3, #10
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	4619      	mov	r1, r3
 800716a:	4817      	ldr	r0, [pc, #92]	; (80071c8 <HAL_PCD_MspInit+0xb4>)
 800716c:	f7f9 fff2 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800717a:	2300      	movs	r3, #0
 800717c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4619      	mov	r1, r3
 8007184:	4810      	ldr	r0, [pc, #64]	; (80071c8 <HAL_PCD_MspInit+0xb4>)
 8007186:	f7f9 ffe5 	bl	8001154 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	6353      	str	r3, [r2, #52]	; 0x34
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 80071a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ac:	6453      	str	r3, [r2, #68]	; 0x44
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_PCD_MspInit+0xb0>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071ba:	bf00      	nop
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40020000 	.word	0x40020000

080071cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80071cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007204 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80071d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071d2:	e003      	b.n	80071dc <LoopCopyDataInit>

080071d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80071d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071da:	3104      	adds	r1, #4

080071dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80071dc:	480b      	ldr	r0, [pc, #44]	; (800720c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80071e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071e4:	d3f6      	bcc.n	80071d4 <CopyDataInit>
  ldr  r2, =_sbss
 80071e6:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80071e8:	e002      	b.n	80071f0 <LoopFillZerobss>

080071ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80071ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071ec:	f842 3b04 	str.w	r3, [r2], #4

080071f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071f0:	4b09      	ldr	r3, [pc, #36]	; (8007218 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071f4:	d3f9      	bcc.n	80071ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80071f6:	f7ff fd3b 	bl	8006c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071fa:	f000 f81b 	bl	8007234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071fe:	f7ff fb5f 	bl	80068c0 <main>
  bx  lr    
 8007202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007204:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007208:	08007e98 	.word	0x08007e98
  ldr  r0, =_sdata
 800720c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007210:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007214:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007218:	20000970 	.word	0x20000970

0800721c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800721c:	e7fe      	b.n	800721c <ADC_IRQHandler>

0800721e <atoi>:
 800721e:	220a      	movs	r2, #10
 8007220:	2100      	movs	r1, #0
 8007222:	f000 b8e9 	b.w	80073f8 <strtol>
	...

08007228 <__errno>:
 8007228:	4b01      	ldr	r3, [pc, #4]	; (8007230 <__errno+0x8>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	2000000c 	.word	0x2000000c

08007234 <__libc_init_array>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4e0d      	ldr	r6, [pc, #52]	; (800726c <__libc_init_array+0x38>)
 8007238:	4c0d      	ldr	r4, [pc, #52]	; (8007270 <__libc_init_array+0x3c>)
 800723a:	1ba4      	subs	r4, r4, r6
 800723c:	10a4      	asrs	r4, r4, #2
 800723e:	2500      	movs	r5, #0
 8007240:	42a5      	cmp	r5, r4
 8007242:	d109      	bne.n	8007258 <__libc_init_array+0x24>
 8007244:	4e0b      	ldr	r6, [pc, #44]	; (8007274 <__libc_init_array+0x40>)
 8007246:	4c0c      	ldr	r4, [pc, #48]	; (8007278 <__libc_init_array+0x44>)
 8007248:	f000 fd34 	bl	8007cb4 <_init>
 800724c:	1ba4      	subs	r4, r4, r6
 800724e:	10a4      	asrs	r4, r4, #2
 8007250:	2500      	movs	r5, #0
 8007252:	42a5      	cmp	r5, r4
 8007254:	d105      	bne.n	8007262 <__libc_init_array+0x2e>
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800725c:	4798      	blx	r3
 800725e:	3501      	adds	r5, #1
 8007260:	e7ee      	b.n	8007240 <__libc_init_array+0xc>
 8007262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007266:	4798      	blx	r3
 8007268:	3501      	adds	r5, #1
 800726a:	e7f2      	b.n	8007252 <__libc_init_array+0x1e>
 800726c:	08007e90 	.word	0x08007e90
 8007270:	08007e90 	.word	0x08007e90
 8007274:	08007e90 	.word	0x08007e90
 8007278:	08007e94 	.word	0x08007e94

0800727c <__itoa>:
 800727c:	1e93      	subs	r3, r2, #2
 800727e:	2b22      	cmp	r3, #34	; 0x22
 8007280:	b510      	push	{r4, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	d904      	bls.n	8007290 <__itoa+0x14>
 8007286:	2300      	movs	r3, #0
 8007288:	700b      	strb	r3, [r1, #0]
 800728a:	461c      	mov	r4, r3
 800728c:	4620      	mov	r0, r4
 800728e:	bd10      	pop	{r4, pc}
 8007290:	2a0a      	cmp	r2, #10
 8007292:	d109      	bne.n	80072a8 <__itoa+0x2c>
 8007294:	2800      	cmp	r0, #0
 8007296:	da07      	bge.n	80072a8 <__itoa+0x2c>
 8007298:	232d      	movs	r3, #45	; 0x2d
 800729a:	700b      	strb	r3, [r1, #0]
 800729c:	4240      	negs	r0, r0
 800729e:	2101      	movs	r1, #1
 80072a0:	4421      	add	r1, r4
 80072a2:	f000 f8bf 	bl	8007424 <__utoa>
 80072a6:	e7f1      	b.n	800728c <__itoa+0x10>
 80072a8:	2100      	movs	r1, #0
 80072aa:	e7f9      	b.n	80072a0 <__itoa+0x24>

080072ac <itoa>:
 80072ac:	f7ff bfe6 	b.w	800727c <__itoa>

080072b0 <memset>:
 80072b0:	4402      	add	r2, r0
 80072b2:	4603      	mov	r3, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	f803 1b01 	strb.w	r1, [r3], #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <siprintf>:
 80072c0:	b40e      	push	{r1, r2, r3}
 80072c2:	b500      	push	{lr}
 80072c4:	b09c      	sub	sp, #112	; 0x70
 80072c6:	ab1d      	add	r3, sp, #116	; 0x74
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072d0:	4809      	ldr	r0, [pc, #36]	; (80072f8 <siprintf+0x38>)
 80072d2:	9107      	str	r1, [sp, #28]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	4909      	ldr	r1, [pc, #36]	; (80072fc <siprintf+0x3c>)
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	f000 f94c 	bl	8007580 <_svfiprintf_r>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	b01c      	add	sp, #112	; 0x70
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	2000000c 	.word	0x2000000c
 80072fc:	ffff0208 	.word	0xffff0208

08007300 <_strtol_l.isra.0>:
 8007300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	4680      	mov	r8, r0
 8007306:	4689      	mov	r9, r1
 8007308:	4692      	mov	sl, r2
 800730a:	461e      	mov	r6, r3
 800730c:	460f      	mov	r7, r1
 800730e:	463d      	mov	r5, r7
 8007310:	9808      	ldr	r0, [sp, #32]
 8007312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007316:	f000 f8c3 	bl	80074a0 <__locale_ctype_ptr_l>
 800731a:	4420      	add	r0, r4
 800731c:	7843      	ldrb	r3, [r0, #1]
 800731e:	f013 0308 	ands.w	r3, r3, #8
 8007322:	d132      	bne.n	800738a <_strtol_l.isra.0+0x8a>
 8007324:	2c2d      	cmp	r4, #45	; 0x2d
 8007326:	d132      	bne.n	800738e <_strtol_l.isra.0+0x8e>
 8007328:	787c      	ldrb	r4, [r7, #1]
 800732a:	1cbd      	adds	r5, r7, #2
 800732c:	2201      	movs	r2, #1
 800732e:	2e00      	cmp	r6, #0
 8007330:	d05d      	beq.n	80073ee <_strtol_l.isra.0+0xee>
 8007332:	2e10      	cmp	r6, #16
 8007334:	d109      	bne.n	800734a <_strtol_l.isra.0+0x4a>
 8007336:	2c30      	cmp	r4, #48	; 0x30
 8007338:	d107      	bne.n	800734a <_strtol_l.isra.0+0x4a>
 800733a:	782b      	ldrb	r3, [r5, #0]
 800733c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007340:	2b58      	cmp	r3, #88	; 0x58
 8007342:	d14f      	bne.n	80073e4 <_strtol_l.isra.0+0xe4>
 8007344:	786c      	ldrb	r4, [r5, #1]
 8007346:	2610      	movs	r6, #16
 8007348:	3502      	adds	r5, #2
 800734a:	2a00      	cmp	r2, #0
 800734c:	bf14      	ite	ne
 800734e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007352:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007356:	2700      	movs	r7, #0
 8007358:	fbb1 fcf6 	udiv	ip, r1, r6
 800735c:	4638      	mov	r0, r7
 800735e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007362:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007366:	2b09      	cmp	r3, #9
 8007368:	d817      	bhi.n	800739a <_strtol_l.isra.0+0x9a>
 800736a:	461c      	mov	r4, r3
 800736c:	42a6      	cmp	r6, r4
 800736e:	dd23      	ble.n	80073b8 <_strtol_l.isra.0+0xb8>
 8007370:	1c7b      	adds	r3, r7, #1
 8007372:	d007      	beq.n	8007384 <_strtol_l.isra.0+0x84>
 8007374:	4584      	cmp	ip, r0
 8007376:	d31c      	bcc.n	80073b2 <_strtol_l.isra.0+0xb2>
 8007378:	d101      	bne.n	800737e <_strtol_l.isra.0+0x7e>
 800737a:	45a6      	cmp	lr, r4
 800737c:	db19      	blt.n	80073b2 <_strtol_l.isra.0+0xb2>
 800737e:	fb00 4006 	mla	r0, r0, r6, r4
 8007382:	2701      	movs	r7, #1
 8007384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007388:	e7eb      	b.n	8007362 <_strtol_l.isra.0+0x62>
 800738a:	462f      	mov	r7, r5
 800738c:	e7bf      	b.n	800730e <_strtol_l.isra.0+0xe>
 800738e:	2c2b      	cmp	r4, #43	; 0x2b
 8007390:	bf04      	itt	eq
 8007392:	1cbd      	addeq	r5, r7, #2
 8007394:	787c      	ldrbeq	r4, [r7, #1]
 8007396:	461a      	mov	r2, r3
 8007398:	e7c9      	b.n	800732e <_strtol_l.isra.0+0x2e>
 800739a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800739e:	2b19      	cmp	r3, #25
 80073a0:	d801      	bhi.n	80073a6 <_strtol_l.isra.0+0xa6>
 80073a2:	3c37      	subs	r4, #55	; 0x37
 80073a4:	e7e2      	b.n	800736c <_strtol_l.isra.0+0x6c>
 80073a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80073aa:	2b19      	cmp	r3, #25
 80073ac:	d804      	bhi.n	80073b8 <_strtol_l.isra.0+0xb8>
 80073ae:	3c57      	subs	r4, #87	; 0x57
 80073b0:	e7dc      	b.n	800736c <_strtol_l.isra.0+0x6c>
 80073b2:	f04f 37ff 	mov.w	r7, #4294967295
 80073b6:	e7e5      	b.n	8007384 <_strtol_l.isra.0+0x84>
 80073b8:	1c7b      	adds	r3, r7, #1
 80073ba:	d108      	bne.n	80073ce <_strtol_l.isra.0+0xce>
 80073bc:	2322      	movs	r3, #34	; 0x22
 80073be:	f8c8 3000 	str.w	r3, [r8]
 80073c2:	4608      	mov	r0, r1
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	d107      	bne.n	80073da <_strtol_l.isra.0+0xda>
 80073ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ce:	b102      	cbz	r2, 80073d2 <_strtol_l.isra.0+0xd2>
 80073d0:	4240      	negs	r0, r0
 80073d2:	f1ba 0f00 	cmp.w	sl, #0
 80073d6:	d0f8      	beq.n	80073ca <_strtol_l.isra.0+0xca>
 80073d8:	b10f      	cbz	r7, 80073de <_strtol_l.isra.0+0xde>
 80073da:	f105 39ff 	add.w	r9, r5, #4294967295
 80073de:	f8ca 9000 	str.w	r9, [sl]
 80073e2:	e7f2      	b.n	80073ca <_strtol_l.isra.0+0xca>
 80073e4:	2430      	movs	r4, #48	; 0x30
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	d1af      	bne.n	800734a <_strtol_l.isra.0+0x4a>
 80073ea:	2608      	movs	r6, #8
 80073ec:	e7ad      	b.n	800734a <_strtol_l.isra.0+0x4a>
 80073ee:	2c30      	cmp	r4, #48	; 0x30
 80073f0:	d0a3      	beq.n	800733a <_strtol_l.isra.0+0x3a>
 80073f2:	260a      	movs	r6, #10
 80073f4:	e7a9      	b.n	800734a <_strtol_l.isra.0+0x4a>
	...

080073f8 <strtol>:
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <strtol+0x24>)
 80073fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073fc:	681c      	ldr	r4, [r3, #0]
 80073fe:	4d08      	ldr	r5, [pc, #32]	; (8007420 <strtol+0x28>)
 8007400:	6a23      	ldr	r3, [r4, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf08      	it	eq
 8007406:	462b      	moveq	r3, r5
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	4613      	mov	r3, r2
 800740c:	460a      	mov	r2, r1
 800740e:	4601      	mov	r1, r0
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff ff75 	bl	8007300 <_strtol_l.isra.0>
 8007416:	b003      	add	sp, #12
 8007418:	bd30      	pop	{r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	2000000c 	.word	0x2000000c
 8007420:	20000070 	.word	0x20000070

08007424 <__utoa>:
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	4b1d      	ldr	r3, [pc, #116]	; (800749c <__utoa+0x78>)
 8007428:	b08b      	sub	sp, #44	; 0x2c
 800742a:	4605      	mov	r5, r0
 800742c:	460c      	mov	r4, r1
 800742e:	466e      	mov	r6, sp
 8007430:	f103 0c20 	add.w	ip, r3, #32
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	4637      	mov	r7, r6
 800743a:	c703      	stmia	r7!, {r0, r1}
 800743c:	3308      	adds	r3, #8
 800743e:	4563      	cmp	r3, ip
 8007440:	463e      	mov	r6, r7
 8007442:	d1f7      	bne.n	8007434 <__utoa+0x10>
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	713b      	strb	r3, [r7, #4]
 800744a:	1e93      	subs	r3, r2, #2
 800744c:	2b22      	cmp	r3, #34	; 0x22
 800744e:	6038      	str	r0, [r7, #0]
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	d904      	bls.n	8007460 <__utoa+0x3c>
 8007456:	7023      	strb	r3, [r4, #0]
 8007458:	461c      	mov	r4, r3
 800745a:	4620      	mov	r0, r4
 800745c:	b00b      	add	sp, #44	; 0x2c
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007460:	1e66      	subs	r6, r4, #1
 8007462:	fbb5 f0f2 	udiv	r0, r5, r2
 8007466:	af0a      	add	r7, sp, #40	; 0x28
 8007468:	fb02 5510 	mls	r5, r2, r0, r5
 800746c:	443d      	add	r5, r7
 800746e:	1c59      	adds	r1, r3, #1
 8007470:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007474:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007478:	4605      	mov	r5, r0
 800747a:	b968      	cbnz	r0, 8007498 <__utoa+0x74>
 800747c:	5460      	strb	r0, [r4, r1]
 800747e:	4423      	add	r3, r4
 8007480:	4622      	mov	r2, r4
 8007482:	1b19      	subs	r1, r3, r4
 8007484:	1b10      	subs	r0, r2, r4
 8007486:	4281      	cmp	r1, r0
 8007488:	dde7      	ble.n	800745a <__utoa+0x36>
 800748a:	7811      	ldrb	r1, [r2, #0]
 800748c:	7818      	ldrb	r0, [r3, #0]
 800748e:	f802 0b01 	strb.w	r0, [r2], #1
 8007492:	f803 1901 	strb.w	r1, [r3], #-1
 8007496:	e7f4      	b.n	8007482 <__utoa+0x5e>
 8007498:	460b      	mov	r3, r1
 800749a:	e7e2      	b.n	8007462 <__utoa+0x3e>
 800749c:	08007d24 	.word	0x08007d24

080074a0 <__locale_ctype_ptr_l>:
 80074a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80074a4:	4770      	bx	lr

080074a6 <__ascii_mbtowc>:
 80074a6:	b082      	sub	sp, #8
 80074a8:	b901      	cbnz	r1, 80074ac <__ascii_mbtowc+0x6>
 80074aa:	a901      	add	r1, sp, #4
 80074ac:	b142      	cbz	r2, 80074c0 <__ascii_mbtowc+0x1a>
 80074ae:	b14b      	cbz	r3, 80074c4 <__ascii_mbtowc+0x1e>
 80074b0:	7813      	ldrb	r3, [r2, #0]
 80074b2:	600b      	str	r3, [r1, #0]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	1c10      	adds	r0, r2, #0
 80074b8:	bf18      	it	ne
 80074ba:	2001      	movne	r0, #1
 80074bc:	b002      	add	sp, #8
 80074be:	4770      	bx	lr
 80074c0:	4610      	mov	r0, r2
 80074c2:	e7fb      	b.n	80074bc <__ascii_mbtowc+0x16>
 80074c4:	f06f 0001 	mvn.w	r0, #1
 80074c8:	e7f8      	b.n	80074bc <__ascii_mbtowc+0x16>

080074ca <__ssputs_r>:
 80074ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ce:	688e      	ldr	r6, [r1, #8]
 80074d0:	429e      	cmp	r6, r3
 80074d2:	4682      	mov	sl, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	4690      	mov	r8, r2
 80074d8:	4699      	mov	r9, r3
 80074da:	d837      	bhi.n	800754c <__ssputs_r+0x82>
 80074dc:	898a      	ldrh	r2, [r1, #12]
 80074de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e2:	d031      	beq.n	8007548 <__ssputs_r+0x7e>
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	6909      	ldr	r1, [r1, #16]
 80074e8:	1a6f      	subs	r7, r5, r1
 80074ea:	6965      	ldr	r5, [r4, #20]
 80074ec:	2302      	movs	r3, #2
 80074ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f2:	fb95 f5f3 	sdiv	r5, r5, r3
 80074f6:	f109 0301 	add.w	r3, r9, #1
 80074fa:	443b      	add	r3, r7
 80074fc:	429d      	cmp	r5, r3
 80074fe:	bf38      	it	cc
 8007500:	461d      	movcc	r5, r3
 8007502:	0553      	lsls	r3, r2, #21
 8007504:	d530      	bpl.n	8007568 <__ssputs_r+0x9e>
 8007506:	4629      	mov	r1, r5
 8007508:	f000 fb3a 	bl	8007b80 <_malloc_r>
 800750c:	4606      	mov	r6, r0
 800750e:	b950      	cbnz	r0, 8007526 <__ssputs_r+0x5c>
 8007510:	230c      	movs	r3, #12
 8007512:	f8ca 3000 	str.w	r3, [sl]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	463a      	mov	r2, r7
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	f000 fab6 	bl	8007a9a <memcpy>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	6126      	str	r6, [r4, #16]
 800753c:	6165      	str	r5, [r4, #20]
 800753e:	443e      	add	r6, r7
 8007540:	1bed      	subs	r5, r5, r7
 8007542:	6026      	str	r6, [r4, #0]
 8007544:	60a5      	str	r5, [r4, #8]
 8007546:	464e      	mov	r6, r9
 8007548:	454e      	cmp	r6, r9
 800754a:	d900      	bls.n	800754e <__ssputs_r+0x84>
 800754c:	464e      	mov	r6, r9
 800754e:	4632      	mov	r2, r6
 8007550:	4641      	mov	r1, r8
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	f000 faac 	bl	8007ab0 <memmove>
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	1b9b      	subs	r3, r3, r6
 800755c:	60a3      	str	r3, [r4, #8]
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	441e      	add	r6, r3
 8007562:	6026      	str	r6, [r4, #0]
 8007564:	2000      	movs	r0, #0
 8007566:	e7dc      	b.n	8007522 <__ssputs_r+0x58>
 8007568:	462a      	mov	r2, r5
 800756a:	f000 fb63 	bl	8007c34 <_realloc_r>
 800756e:	4606      	mov	r6, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	d1e2      	bne.n	800753a <__ssputs_r+0x70>
 8007574:	6921      	ldr	r1, [r4, #16]
 8007576:	4650      	mov	r0, sl
 8007578:	f000 fab4 	bl	8007ae4 <_free_r>
 800757c:	e7c8      	b.n	8007510 <__ssputs_r+0x46>
	...

08007580 <_svfiprintf_r>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	461d      	mov	r5, r3
 8007586:	898b      	ldrh	r3, [r1, #12]
 8007588:	061f      	lsls	r7, r3, #24
 800758a:	b09d      	sub	sp, #116	; 0x74
 800758c:	4680      	mov	r8, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4616      	mov	r6, r2
 8007592:	d50f      	bpl.n	80075b4 <_svfiprintf_r+0x34>
 8007594:	690b      	ldr	r3, [r1, #16]
 8007596:	b96b      	cbnz	r3, 80075b4 <_svfiprintf_r+0x34>
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	f000 faf1 	bl	8007b80 <_malloc_r>
 800759e:	6020      	str	r0, [r4, #0]
 80075a0:	6120      	str	r0, [r4, #16]
 80075a2:	b928      	cbnz	r0, 80075b0 <_svfiprintf_r+0x30>
 80075a4:	230c      	movs	r3, #12
 80075a6:	f8c8 3000 	str.w	r3, [r8]
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	e0c8      	b.n	8007742 <_svfiprintf_r+0x1c2>
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	2300      	movs	r3, #0
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2320      	movs	r3, #32
 80075ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075be:	2330      	movs	r3, #48	; 0x30
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c4:	9503      	str	r5, [sp, #12]
 80075c6:	f04f 0b01 	mov.w	fp, #1
 80075ca:	4637      	mov	r7, r6
 80075cc:	463d      	mov	r5, r7
 80075ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075d2:	b10b      	cbz	r3, 80075d8 <_svfiprintf_r+0x58>
 80075d4:	2b25      	cmp	r3, #37	; 0x25
 80075d6:	d13e      	bne.n	8007656 <_svfiprintf_r+0xd6>
 80075d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80075dc:	d00b      	beq.n	80075f6 <_svfiprintf_r+0x76>
 80075de:	4653      	mov	r3, sl
 80075e0:	4632      	mov	r2, r6
 80075e2:	4621      	mov	r1, r4
 80075e4:	4640      	mov	r0, r8
 80075e6:	f7ff ff70 	bl	80074ca <__ssputs_r>
 80075ea:	3001      	adds	r0, #1
 80075ec:	f000 80a4 	beq.w	8007738 <_svfiprintf_r+0x1b8>
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	4453      	add	r3, sl
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	783b      	ldrb	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 809d 	beq.w	8007738 <_svfiprintf_r+0x1b8>
 80075fe:	2300      	movs	r3, #0
 8007600:	f04f 32ff 	mov.w	r2, #4294967295
 8007604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007610:	931a      	str	r3, [sp, #104]	; 0x68
 8007612:	462f      	mov	r7, r5
 8007614:	2205      	movs	r2, #5
 8007616:	f817 1b01 	ldrb.w	r1, [r7], #1
 800761a:	4850      	ldr	r0, [pc, #320]	; (800775c <_svfiprintf_r+0x1dc>)
 800761c:	f7f8 fdf8 	bl	8000210 <memchr>
 8007620:	9b04      	ldr	r3, [sp, #16]
 8007622:	b9d0      	cbnz	r0, 800765a <_svfiprintf_r+0xda>
 8007624:	06d9      	lsls	r1, r3, #27
 8007626:	bf44      	itt	mi
 8007628:	2220      	movmi	r2, #32
 800762a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800762e:	071a      	lsls	r2, r3, #28
 8007630:	bf44      	itt	mi
 8007632:	222b      	movmi	r2, #43	; 0x2b
 8007634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007638:	782a      	ldrb	r2, [r5, #0]
 800763a:	2a2a      	cmp	r2, #42	; 0x2a
 800763c:	d015      	beq.n	800766a <_svfiprintf_r+0xea>
 800763e:	9a07      	ldr	r2, [sp, #28]
 8007640:	462f      	mov	r7, r5
 8007642:	2000      	movs	r0, #0
 8007644:	250a      	movs	r5, #10
 8007646:	4639      	mov	r1, r7
 8007648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800764c:	3b30      	subs	r3, #48	; 0x30
 800764e:	2b09      	cmp	r3, #9
 8007650:	d94d      	bls.n	80076ee <_svfiprintf_r+0x16e>
 8007652:	b1b8      	cbz	r0, 8007684 <_svfiprintf_r+0x104>
 8007654:	e00f      	b.n	8007676 <_svfiprintf_r+0xf6>
 8007656:	462f      	mov	r7, r5
 8007658:	e7b8      	b.n	80075cc <_svfiprintf_r+0x4c>
 800765a:	4a40      	ldr	r2, [pc, #256]	; (800775c <_svfiprintf_r+0x1dc>)
 800765c:	1a80      	subs	r0, r0, r2
 800765e:	fa0b f000 	lsl.w	r0, fp, r0
 8007662:	4318      	orrs	r0, r3
 8007664:	9004      	str	r0, [sp, #16]
 8007666:	463d      	mov	r5, r7
 8007668:	e7d3      	b.n	8007612 <_svfiprintf_r+0x92>
 800766a:	9a03      	ldr	r2, [sp, #12]
 800766c:	1d11      	adds	r1, r2, #4
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	9103      	str	r1, [sp, #12]
 8007672:	2a00      	cmp	r2, #0
 8007674:	db01      	blt.n	800767a <_svfiprintf_r+0xfa>
 8007676:	9207      	str	r2, [sp, #28]
 8007678:	e004      	b.n	8007684 <_svfiprintf_r+0x104>
 800767a:	4252      	negs	r2, r2
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	9207      	str	r2, [sp, #28]
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	783b      	ldrb	r3, [r7, #0]
 8007686:	2b2e      	cmp	r3, #46	; 0x2e
 8007688:	d10c      	bne.n	80076a4 <_svfiprintf_r+0x124>
 800768a:	787b      	ldrb	r3, [r7, #1]
 800768c:	2b2a      	cmp	r3, #42	; 0x2a
 800768e:	d133      	bne.n	80076f8 <_svfiprintf_r+0x178>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	9203      	str	r2, [sp, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bfb8      	it	lt
 800769c:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a0:	3702      	adds	r7, #2
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	4d2e      	ldr	r5, [pc, #184]	; (8007760 <_svfiprintf_r+0x1e0>)
 80076a6:	7839      	ldrb	r1, [r7, #0]
 80076a8:	2203      	movs	r2, #3
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7f8 fdb0 	bl	8000210 <memchr>
 80076b0:	b138      	cbz	r0, 80076c2 <_svfiprintf_r+0x142>
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	1b40      	subs	r0, r0, r5
 80076b6:	fa03 f000 	lsl.w	r0, r3, r0
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	4303      	orrs	r3, r0
 80076be:	3701      	adds	r7, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	7839      	ldrb	r1, [r7, #0]
 80076c4:	4827      	ldr	r0, [pc, #156]	; (8007764 <_svfiprintf_r+0x1e4>)
 80076c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ca:	2206      	movs	r2, #6
 80076cc:	1c7e      	adds	r6, r7, #1
 80076ce:	f7f8 fd9f 	bl	8000210 <memchr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d038      	beq.n	8007748 <_svfiprintf_r+0x1c8>
 80076d6:	4b24      	ldr	r3, [pc, #144]	; (8007768 <_svfiprintf_r+0x1e8>)
 80076d8:	bb13      	cbnz	r3, 8007720 <_svfiprintf_r+0x1a0>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	3307      	adds	r3, #7
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	3308      	adds	r3, #8
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	444b      	add	r3, r9
 80076ea:	9309      	str	r3, [sp, #36]	; 0x24
 80076ec:	e76d      	b.n	80075ca <_svfiprintf_r+0x4a>
 80076ee:	fb05 3202 	mla	r2, r5, r2, r3
 80076f2:	2001      	movs	r0, #1
 80076f4:	460f      	mov	r7, r1
 80076f6:	e7a6      	b.n	8007646 <_svfiprintf_r+0xc6>
 80076f8:	2300      	movs	r3, #0
 80076fa:	3701      	adds	r7, #1
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	4619      	mov	r1, r3
 8007700:	250a      	movs	r5, #10
 8007702:	4638      	mov	r0, r7
 8007704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007708:	3a30      	subs	r2, #48	; 0x30
 800770a:	2a09      	cmp	r2, #9
 800770c:	d903      	bls.n	8007716 <_svfiprintf_r+0x196>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0c8      	beq.n	80076a4 <_svfiprintf_r+0x124>
 8007712:	9105      	str	r1, [sp, #20]
 8007714:	e7c6      	b.n	80076a4 <_svfiprintf_r+0x124>
 8007716:	fb05 2101 	mla	r1, r5, r1, r2
 800771a:	2301      	movs	r3, #1
 800771c:	4607      	mov	r7, r0
 800771e:	e7f0      	b.n	8007702 <_svfiprintf_r+0x182>
 8007720:	ab03      	add	r3, sp, #12
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4622      	mov	r2, r4
 8007726:	4b11      	ldr	r3, [pc, #68]	; (800776c <_svfiprintf_r+0x1ec>)
 8007728:	a904      	add	r1, sp, #16
 800772a:	4640      	mov	r0, r8
 800772c:	f3af 8000 	nop.w
 8007730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007734:	4681      	mov	r9, r0
 8007736:	d1d6      	bne.n	80076e6 <_svfiprintf_r+0x166>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	065b      	lsls	r3, r3, #25
 800773c:	f53f af35 	bmi.w	80075aa <_svfiprintf_r+0x2a>
 8007740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007742:	b01d      	add	sp, #116	; 0x74
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4622      	mov	r2, r4
 800774e:	4b07      	ldr	r3, [pc, #28]	; (800776c <_svfiprintf_r+0x1ec>)
 8007750:	a904      	add	r1, sp, #16
 8007752:	4640      	mov	r0, r8
 8007754:	f000 f882 	bl	800785c <_printf_i>
 8007758:	e7ea      	b.n	8007730 <_svfiprintf_r+0x1b0>
 800775a:	bf00      	nop
 800775c:	08007d53 	.word	0x08007d53
 8007760:	08007d59 	.word	0x08007d59
 8007764:	08007d5d 	.word	0x08007d5d
 8007768:	00000000 	.word	0x00000000
 800776c:	080074cb 	.word	0x080074cb

08007770 <_printf_common>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	4691      	mov	r9, r2
 8007776:	461f      	mov	r7, r3
 8007778:	688a      	ldr	r2, [r1, #8]
 800777a:	690b      	ldr	r3, [r1, #16]
 800777c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007780:	4293      	cmp	r3, r2
 8007782:	bfb8      	it	lt
 8007784:	4613      	movlt	r3, r2
 8007786:	f8c9 3000 	str.w	r3, [r9]
 800778a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800778e:	4606      	mov	r6, r0
 8007790:	460c      	mov	r4, r1
 8007792:	b112      	cbz	r2, 800779a <_printf_common+0x2a>
 8007794:	3301      	adds	r3, #1
 8007796:	f8c9 3000 	str.w	r3, [r9]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077a4:	3302      	addmi	r3, #2
 80077a6:	f8c9 3000 	strmi.w	r3, [r9]
 80077aa:	6825      	ldr	r5, [r4, #0]
 80077ac:	f015 0506 	ands.w	r5, r5, #6
 80077b0:	d107      	bne.n	80077c2 <_printf_common+0x52>
 80077b2:	f104 0a19 	add.w	sl, r4, #25
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	f8d9 2000 	ldr.w	r2, [r9]
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	42ab      	cmp	r3, r5
 80077c0:	dc28      	bgt.n	8007814 <_printf_common+0xa4>
 80077c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	3300      	adds	r3, #0
 80077ca:	bf18      	it	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	0692      	lsls	r2, r2, #26
 80077d0:	d42d      	bmi.n	800782e <_printf_common+0xbe>
 80077d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d6:	4639      	mov	r1, r7
 80077d8:	4630      	mov	r0, r6
 80077da:	47c0      	blx	r8
 80077dc:	3001      	adds	r0, #1
 80077de:	d020      	beq.n	8007822 <_printf_common+0xb2>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	68e5      	ldr	r5, [r4, #12]
 80077e4:	f8d9 2000 	ldr.w	r2, [r9]
 80077e8:	f003 0306 	and.w	r3, r3, #6
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	bf08      	it	eq
 80077f0:	1aad      	subeq	r5, r5, r2
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	bf0c      	ite	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	2500      	movne	r5, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	bfc4      	itt	gt
 8007802:	1a9b      	subgt	r3, r3, r2
 8007804:	18ed      	addgt	r5, r5, r3
 8007806:	f04f 0900 	mov.w	r9, #0
 800780a:	341a      	adds	r4, #26
 800780c:	454d      	cmp	r5, r9
 800780e:	d11a      	bne.n	8007846 <_printf_common+0xd6>
 8007810:	2000      	movs	r0, #0
 8007812:	e008      	b.n	8007826 <_printf_common+0xb6>
 8007814:	2301      	movs	r3, #1
 8007816:	4652      	mov	r2, sl
 8007818:	4639      	mov	r1, r7
 800781a:	4630      	mov	r0, r6
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d103      	bne.n	800782a <_printf_common+0xba>
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	3501      	adds	r5, #1
 800782c:	e7c3      	b.n	80077b6 <_printf_common+0x46>
 800782e:	18e1      	adds	r1, r4, r3
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	2030      	movs	r0, #48	; 0x30
 8007834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007838:	4422      	add	r2, r4
 800783a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800783e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007842:	3302      	adds	r3, #2
 8007844:	e7c5      	b.n	80077d2 <_printf_common+0x62>
 8007846:	2301      	movs	r3, #1
 8007848:	4622      	mov	r2, r4
 800784a:	4639      	mov	r1, r7
 800784c:	4630      	mov	r0, r6
 800784e:	47c0      	blx	r8
 8007850:	3001      	adds	r0, #1
 8007852:	d0e6      	beq.n	8007822 <_printf_common+0xb2>
 8007854:	f109 0901 	add.w	r9, r9, #1
 8007858:	e7d8      	b.n	800780c <_printf_common+0x9c>
	...

0800785c <_printf_i>:
 800785c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007864:	460c      	mov	r4, r1
 8007866:	7e09      	ldrb	r1, [r1, #24]
 8007868:	b085      	sub	sp, #20
 800786a:	296e      	cmp	r1, #110	; 0x6e
 800786c:	4617      	mov	r7, r2
 800786e:	4606      	mov	r6, r0
 8007870:	4698      	mov	r8, r3
 8007872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007874:	f000 80b3 	beq.w	80079de <_printf_i+0x182>
 8007878:	d822      	bhi.n	80078c0 <_printf_i+0x64>
 800787a:	2963      	cmp	r1, #99	; 0x63
 800787c:	d036      	beq.n	80078ec <_printf_i+0x90>
 800787e:	d80a      	bhi.n	8007896 <_printf_i+0x3a>
 8007880:	2900      	cmp	r1, #0
 8007882:	f000 80b9 	beq.w	80079f8 <_printf_i+0x19c>
 8007886:	2958      	cmp	r1, #88	; 0x58
 8007888:	f000 8083 	beq.w	8007992 <_printf_i+0x136>
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007894:	e032      	b.n	80078fc <_printf_i+0xa0>
 8007896:	2964      	cmp	r1, #100	; 0x64
 8007898:	d001      	beq.n	800789e <_printf_i+0x42>
 800789a:	2969      	cmp	r1, #105	; 0x69
 800789c:	d1f6      	bne.n	800788c <_printf_i+0x30>
 800789e:	6820      	ldr	r0, [r4, #0]
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	0605      	lsls	r5, r0, #24
 80078a4:	f103 0104 	add.w	r1, r3, #4
 80078a8:	d52a      	bpl.n	8007900 <_printf_i+0xa4>
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da03      	bge.n	80078ba <_printf_i+0x5e>
 80078b2:	222d      	movs	r2, #45	; 0x2d
 80078b4:	425b      	negs	r3, r3
 80078b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078ba:	486f      	ldr	r0, [pc, #444]	; (8007a78 <_printf_i+0x21c>)
 80078bc:	220a      	movs	r2, #10
 80078be:	e039      	b.n	8007934 <_printf_i+0xd8>
 80078c0:	2973      	cmp	r1, #115	; 0x73
 80078c2:	f000 809d 	beq.w	8007a00 <_printf_i+0x1a4>
 80078c6:	d808      	bhi.n	80078da <_printf_i+0x7e>
 80078c8:	296f      	cmp	r1, #111	; 0x6f
 80078ca:	d020      	beq.n	800790e <_printf_i+0xb2>
 80078cc:	2970      	cmp	r1, #112	; 0x70
 80078ce:	d1dd      	bne.n	800788c <_printf_i+0x30>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	f043 0320 	orr.w	r3, r3, #32
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	e003      	b.n	80078e2 <_printf_i+0x86>
 80078da:	2975      	cmp	r1, #117	; 0x75
 80078dc:	d017      	beq.n	800790e <_printf_i+0xb2>
 80078de:	2978      	cmp	r1, #120	; 0x78
 80078e0:	d1d4      	bne.n	800788c <_printf_i+0x30>
 80078e2:	2378      	movs	r3, #120	; 0x78
 80078e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078e8:	4864      	ldr	r0, [pc, #400]	; (8007a7c <_printf_i+0x220>)
 80078ea:	e055      	b.n	8007998 <_printf_i+0x13c>
 80078ec:	6813      	ldr	r3, [r2, #0]
 80078ee:	1d19      	adds	r1, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6011      	str	r1, [r2, #0]
 80078f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e08c      	b.n	8007a1a <_printf_i+0x1be>
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6011      	str	r1, [r2, #0]
 8007904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007908:	bf18      	it	ne
 800790a:	b21b      	sxthne	r3, r3
 800790c:	e7cf      	b.n	80078ae <_printf_i+0x52>
 800790e:	6813      	ldr	r3, [r2, #0]
 8007910:	6825      	ldr	r5, [r4, #0]
 8007912:	1d18      	adds	r0, r3, #4
 8007914:	6010      	str	r0, [r2, #0]
 8007916:	0628      	lsls	r0, r5, #24
 8007918:	d501      	bpl.n	800791e <_printf_i+0xc2>
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0xc8>
 800791e:	0668      	lsls	r0, r5, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0xbe>
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	4854      	ldr	r0, [pc, #336]	; (8007a78 <_printf_i+0x21c>)
 8007926:	296f      	cmp	r1, #111	; 0x6f
 8007928:	bf14      	ite	ne
 800792a:	220a      	movne	r2, #10
 800792c:	2208      	moveq	r2, #8
 800792e:	2100      	movs	r1, #0
 8007930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007934:	6865      	ldr	r5, [r4, #4]
 8007936:	60a5      	str	r5, [r4, #8]
 8007938:	2d00      	cmp	r5, #0
 800793a:	f2c0 8095 	blt.w	8007a68 <_printf_i+0x20c>
 800793e:	6821      	ldr	r1, [r4, #0]
 8007940:	f021 0104 	bic.w	r1, r1, #4
 8007944:	6021      	str	r1, [r4, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d13d      	bne.n	80079c6 <_printf_i+0x16a>
 800794a:	2d00      	cmp	r5, #0
 800794c:	f040 808e 	bne.w	8007a6c <_printf_i+0x210>
 8007950:	4665      	mov	r5, ip
 8007952:	2a08      	cmp	r2, #8
 8007954:	d10b      	bne.n	800796e <_printf_i+0x112>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	07db      	lsls	r3, r3, #31
 800795a:	d508      	bpl.n	800796e <_printf_i+0x112>
 800795c:	6923      	ldr	r3, [r4, #16]
 800795e:	6862      	ldr	r2, [r4, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	bfde      	ittt	le
 8007964:	2330      	movle	r3, #48	; 0x30
 8007966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800796a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800796e:	ebac 0305 	sub.w	r3, ip, r5
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	f8cd 8000 	str.w	r8, [sp]
 8007978:	463b      	mov	r3, r7
 800797a:	aa03      	add	r2, sp, #12
 800797c:	4621      	mov	r1, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff fef6 	bl	8007770 <_printf_common>
 8007984:	3001      	adds	r0, #1
 8007986:	d14d      	bne.n	8007a24 <_printf_i+0x1c8>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	b005      	add	sp, #20
 800798e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007992:	4839      	ldr	r0, [pc, #228]	; (8007a78 <_printf_i+0x21c>)
 8007994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	6821      	ldr	r1, [r4, #0]
 800799c:	1d1d      	adds	r5, r3, #4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6015      	str	r5, [r2, #0]
 80079a2:	060a      	lsls	r2, r1, #24
 80079a4:	d50b      	bpl.n	80079be <_printf_i+0x162>
 80079a6:	07ca      	lsls	r2, r1, #31
 80079a8:	bf44      	itt	mi
 80079aa:	f041 0120 	orrmi.w	r1, r1, #32
 80079ae:	6021      	strmi	r1, [r4, #0]
 80079b0:	b91b      	cbnz	r3, 80079ba <_printf_i+0x15e>
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	f022 0220 	bic.w	r2, r2, #32
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	2210      	movs	r2, #16
 80079bc:	e7b7      	b.n	800792e <_printf_i+0xd2>
 80079be:	064d      	lsls	r5, r1, #25
 80079c0:	bf48      	it	mi
 80079c2:	b29b      	uxthmi	r3, r3
 80079c4:	e7ef      	b.n	80079a6 <_printf_i+0x14a>
 80079c6:	4665      	mov	r5, ip
 80079c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079cc:	fb02 3311 	mls	r3, r2, r1, r3
 80079d0:	5cc3      	ldrb	r3, [r0, r3]
 80079d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079d6:	460b      	mov	r3, r1
 80079d8:	2900      	cmp	r1, #0
 80079da:	d1f5      	bne.n	80079c8 <_printf_i+0x16c>
 80079dc:	e7b9      	b.n	8007952 <_printf_i+0xf6>
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	6961      	ldr	r1, [r4, #20]
 80079e4:	1d18      	adds	r0, r3, #4
 80079e6:	6010      	str	r0, [r2, #0]
 80079e8:	0628      	lsls	r0, r5, #24
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	d501      	bpl.n	80079f2 <_printf_i+0x196>
 80079ee:	6019      	str	r1, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <_printf_i+0x19c>
 80079f2:	066a      	lsls	r2, r5, #25
 80079f4:	d5fb      	bpl.n	80079ee <_printf_i+0x192>
 80079f6:	8019      	strh	r1, [r3, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	4665      	mov	r5, ip
 80079fe:	e7b9      	b.n	8007974 <_printf_i+0x118>
 8007a00:	6813      	ldr	r3, [r2, #0]
 8007a02:	1d19      	adds	r1, r3, #4
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	681d      	ldr	r5, [r3, #0]
 8007a08:	6862      	ldr	r2, [r4, #4]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f7f8 fbff 	bl	8000210 <memchr>
 8007a12:	b108      	cbz	r0, 8007a18 <_printf_i+0x1bc>
 8007a14:	1b40      	subs	r0, r0, r5
 8007a16:	6060      	str	r0, [r4, #4]
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	6123      	str	r3, [r4, #16]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a22:	e7a7      	b.n	8007974 <_printf_i+0x118>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	462a      	mov	r2, r5
 8007a28:	4639      	mov	r1, r7
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	47c0      	blx	r8
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0aa      	beq.n	8007988 <_printf_i+0x12c>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	079b      	lsls	r3, r3, #30
 8007a36:	d413      	bmi.n	8007a60 <_printf_i+0x204>
 8007a38:	68e0      	ldr	r0, [r4, #12]
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	4298      	cmp	r0, r3
 8007a3e:	bfb8      	it	lt
 8007a40:	4618      	movlt	r0, r3
 8007a42:	e7a3      	b.n	800798c <_printf_i+0x130>
 8007a44:	2301      	movs	r3, #1
 8007a46:	464a      	mov	r2, r9
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	47c0      	blx	r8
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d09a      	beq.n	8007988 <_printf_i+0x12c>
 8007a52:	3501      	adds	r5, #1
 8007a54:	68e3      	ldr	r3, [r4, #12]
 8007a56:	9a03      	ldr	r2, [sp, #12]
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	dcf2      	bgt.n	8007a44 <_printf_i+0x1e8>
 8007a5e:	e7eb      	b.n	8007a38 <_printf_i+0x1dc>
 8007a60:	2500      	movs	r5, #0
 8007a62:	f104 0919 	add.w	r9, r4, #25
 8007a66:	e7f5      	b.n	8007a54 <_printf_i+0x1f8>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1ac      	bne.n	80079c6 <_printf_i+0x16a>
 8007a6c:	7803      	ldrb	r3, [r0, #0]
 8007a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a76:	e76c      	b.n	8007952 <_printf_i+0xf6>
 8007a78:	08007d64 	.word	0x08007d64
 8007a7c:	08007d75 	.word	0x08007d75

08007a80 <__ascii_wctomb>:
 8007a80:	b149      	cbz	r1, 8007a96 <__ascii_wctomb+0x16>
 8007a82:	2aff      	cmp	r2, #255	; 0xff
 8007a84:	bf85      	ittet	hi
 8007a86:	238a      	movhi	r3, #138	; 0x8a
 8007a88:	6003      	strhi	r3, [r0, #0]
 8007a8a:	700a      	strbls	r2, [r1, #0]
 8007a8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a90:	bf98      	it	ls
 8007a92:	2001      	movls	r0, #1
 8007a94:	4770      	bx	lr
 8007a96:	4608      	mov	r0, r1
 8007a98:	4770      	bx	lr

08007a9a <memcpy>:
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	1e43      	subs	r3, r0, #1
 8007a9e:	440a      	add	r2, r1
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	d100      	bne.n	8007aa6 <memcpy+0xc>
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aae:	e7f7      	b.n	8007aa0 <memcpy+0x6>

08007ab0 <memmove>:
 8007ab0:	4288      	cmp	r0, r1
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	eb01 0302 	add.w	r3, r1, r2
 8007ab8:	d807      	bhi.n	8007aca <memmove+0x1a>
 8007aba:	1e42      	subs	r2, r0, #1
 8007abc:	4299      	cmp	r1, r3
 8007abe:	d00a      	beq.n	8007ad6 <memmove+0x26>
 8007ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ac8:	e7f8      	b.n	8007abc <memmove+0xc>
 8007aca:	4283      	cmp	r3, r0
 8007acc:	d9f5      	bls.n	8007aba <memmove+0xa>
 8007ace:	1881      	adds	r1, r0, r2
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	42d3      	cmn	r3, r2
 8007ad4:	d100      	bne.n	8007ad8 <memmove+0x28>
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007adc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ae0:	e7f7      	b.n	8007ad2 <memmove+0x22>
	...

08007ae4 <_free_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	d045      	beq.n	8007b78 <_free_r+0x94>
 8007aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af0:	1f0c      	subs	r4, r1, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bfb8      	it	lt
 8007af6:	18e4      	addlt	r4, r4, r3
 8007af8:	f000 f8d2 	bl	8007ca0 <__malloc_lock>
 8007afc:	4a1f      	ldr	r2, [pc, #124]	; (8007b7c <_free_r+0x98>)
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	4610      	mov	r0, r2
 8007b02:	b933      	cbnz	r3, 8007b12 <_free_r+0x2e>
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6014      	str	r4, [r2, #0]
 8007b08:	4628      	mov	r0, r5
 8007b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b0e:	f000 b8c8 	b.w	8007ca2 <__malloc_unlock>
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	d90c      	bls.n	8007b30 <_free_r+0x4c>
 8007b16:	6821      	ldr	r1, [r4, #0]
 8007b18:	1862      	adds	r2, r4, r1
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bf04      	itt	eq
 8007b1e:	681a      	ldreq	r2, [r3, #0]
 8007b20:	685b      	ldreq	r3, [r3, #4]
 8007b22:	6063      	str	r3, [r4, #4]
 8007b24:	bf04      	itt	eq
 8007b26:	1852      	addeq	r2, r2, r1
 8007b28:	6022      	streq	r2, [r4, #0]
 8007b2a:	6004      	str	r4, [r0, #0]
 8007b2c:	e7ec      	b.n	8007b08 <_free_r+0x24>
 8007b2e:	4613      	mov	r3, r2
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	b10a      	cbz	r2, 8007b38 <_free_r+0x54>
 8007b34:	42a2      	cmp	r2, r4
 8007b36:	d9fa      	bls.n	8007b2e <_free_r+0x4a>
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	1858      	adds	r0, r3, r1
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d10b      	bne.n	8007b58 <_free_r+0x74>
 8007b40:	6820      	ldr	r0, [r4, #0]
 8007b42:	4401      	add	r1, r0
 8007b44:	1858      	adds	r0, r3, r1
 8007b46:	4282      	cmp	r2, r0
 8007b48:	6019      	str	r1, [r3, #0]
 8007b4a:	d1dd      	bne.n	8007b08 <_free_r+0x24>
 8007b4c:	6810      	ldr	r0, [r2, #0]
 8007b4e:	6852      	ldr	r2, [r2, #4]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	4401      	add	r1, r0
 8007b54:	6019      	str	r1, [r3, #0]
 8007b56:	e7d7      	b.n	8007b08 <_free_r+0x24>
 8007b58:	d902      	bls.n	8007b60 <_free_r+0x7c>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	e7d3      	b.n	8007b08 <_free_r+0x24>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	1821      	adds	r1, r4, r0
 8007b64:	428a      	cmp	r2, r1
 8007b66:	bf04      	itt	eq
 8007b68:	6811      	ldreq	r1, [r2, #0]
 8007b6a:	6852      	ldreq	r2, [r2, #4]
 8007b6c:	6062      	str	r2, [r4, #4]
 8007b6e:	bf04      	itt	eq
 8007b70:	1809      	addeq	r1, r1, r0
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	605c      	str	r4, [r3, #4]
 8007b76:	e7c7      	b.n	8007b08 <_free_r+0x24>
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200001fc 	.word	0x200001fc

08007b80 <_malloc_r>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	1ccd      	adds	r5, r1, #3
 8007b84:	f025 0503 	bic.w	r5, r5, #3
 8007b88:	3508      	adds	r5, #8
 8007b8a:	2d0c      	cmp	r5, #12
 8007b8c:	bf38      	it	cc
 8007b8e:	250c      	movcc	r5, #12
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	4606      	mov	r6, r0
 8007b94:	db01      	blt.n	8007b9a <_malloc_r+0x1a>
 8007b96:	42a9      	cmp	r1, r5
 8007b98:	d903      	bls.n	8007ba2 <_malloc_r+0x22>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
 8007ba2:	f000 f87d 	bl	8007ca0 <__malloc_lock>
 8007ba6:	4a21      	ldr	r2, [pc, #132]	; (8007c2c <_malloc_r+0xac>)
 8007ba8:	6814      	ldr	r4, [r2, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	b991      	cbnz	r1, 8007bd4 <_malloc_r+0x54>
 8007bae:	4c20      	ldr	r4, [pc, #128]	; (8007c30 <_malloc_r+0xb0>)
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	b91b      	cbnz	r3, 8007bbc <_malloc_r+0x3c>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f000 f863 	bl	8007c80 <_sbrk_r>
 8007bba:	6020      	str	r0, [r4, #0]
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f000 f85e 	bl	8007c80 <_sbrk_r>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d124      	bne.n	8007c12 <_malloc_r+0x92>
 8007bc8:	230c      	movs	r3, #12
 8007bca:	6033      	str	r3, [r6, #0]
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f000 f868 	bl	8007ca2 <__malloc_unlock>
 8007bd2:	e7e4      	b.n	8007b9e <_malloc_r+0x1e>
 8007bd4:	680b      	ldr	r3, [r1, #0]
 8007bd6:	1b5b      	subs	r3, r3, r5
 8007bd8:	d418      	bmi.n	8007c0c <_malloc_r+0x8c>
 8007bda:	2b0b      	cmp	r3, #11
 8007bdc:	d90f      	bls.n	8007bfe <_malloc_r+0x7e>
 8007bde:	600b      	str	r3, [r1, #0]
 8007be0:	50cd      	str	r5, [r1, r3]
 8007be2:	18cc      	adds	r4, r1, r3
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f85c 	bl	8007ca2 <__malloc_unlock>
 8007bea:	f104 000b 	add.w	r0, r4, #11
 8007bee:	1d23      	adds	r3, r4, #4
 8007bf0:	f020 0007 	bic.w	r0, r0, #7
 8007bf4:	1ac3      	subs	r3, r0, r3
 8007bf6:	d0d3      	beq.n	8007ba0 <_malloc_r+0x20>
 8007bf8:	425a      	negs	r2, r3
 8007bfa:	50e2      	str	r2, [r4, r3]
 8007bfc:	e7d0      	b.n	8007ba0 <_malloc_r+0x20>
 8007bfe:	428c      	cmp	r4, r1
 8007c00:	684b      	ldr	r3, [r1, #4]
 8007c02:	bf16      	itet	ne
 8007c04:	6063      	strne	r3, [r4, #4]
 8007c06:	6013      	streq	r3, [r2, #0]
 8007c08:	460c      	movne	r4, r1
 8007c0a:	e7eb      	b.n	8007be4 <_malloc_r+0x64>
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6849      	ldr	r1, [r1, #4]
 8007c10:	e7cc      	b.n	8007bac <_malloc_r+0x2c>
 8007c12:	1cc4      	adds	r4, r0, #3
 8007c14:	f024 0403 	bic.w	r4, r4, #3
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d005      	beq.n	8007c28 <_malloc_r+0xa8>
 8007c1c:	1a21      	subs	r1, r4, r0
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f000 f82e 	bl	8007c80 <_sbrk_r>
 8007c24:	3001      	adds	r0, #1
 8007c26:	d0cf      	beq.n	8007bc8 <_malloc_r+0x48>
 8007c28:	6025      	str	r5, [r4, #0]
 8007c2a:	e7db      	b.n	8007be4 <_malloc_r+0x64>
 8007c2c:	200001fc 	.word	0x200001fc
 8007c30:	20000200 	.word	0x20000200

08007c34 <_realloc_r>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	4607      	mov	r7, r0
 8007c38:	4614      	mov	r4, r2
 8007c3a:	460e      	mov	r6, r1
 8007c3c:	b921      	cbnz	r1, 8007c48 <_realloc_r+0x14>
 8007c3e:	4611      	mov	r1, r2
 8007c40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c44:	f7ff bf9c 	b.w	8007b80 <_malloc_r>
 8007c48:	b922      	cbnz	r2, 8007c54 <_realloc_r+0x20>
 8007c4a:	f7ff ff4b 	bl	8007ae4 <_free_r>
 8007c4e:	4625      	mov	r5, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c54:	f000 f826 	bl	8007ca4 <_malloc_usable_size_r>
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d20f      	bcs.n	8007c7c <_realloc_r+0x48>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4638      	mov	r0, r7
 8007c60:	f7ff ff8e 	bl	8007b80 <_malloc_r>
 8007c64:	4605      	mov	r5, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0f2      	beq.n	8007c50 <_realloc_r+0x1c>
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	f7ff ff14 	bl	8007a9a <memcpy>
 8007c72:	4631      	mov	r1, r6
 8007c74:	4638      	mov	r0, r7
 8007c76:	f7ff ff35 	bl	8007ae4 <_free_r>
 8007c7a:	e7e9      	b.n	8007c50 <_realloc_r+0x1c>
 8007c7c:	4635      	mov	r5, r6
 8007c7e:	e7e7      	b.n	8007c50 <_realloc_r+0x1c>

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4c06      	ldr	r4, [pc, #24]	; (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4605      	mov	r5, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	f7fe ffc4 	bl	8006c18 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	2000096c 	.word	0x2000096c

08007ca0 <__malloc_lock>:
 8007ca0:	4770      	bx	lr

08007ca2 <__malloc_unlock>:
 8007ca2:	4770      	bx	lr

08007ca4 <_malloc_usable_size_r>:
 8007ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca8:	1f18      	subs	r0, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfbc      	itt	lt
 8007cae:	580b      	ldrlt	r3, [r1, r0]
 8007cb0:	18c0      	addlt	r0, r0, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_init>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_fini>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr
